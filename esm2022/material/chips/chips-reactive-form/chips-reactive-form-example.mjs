import { LiveAnnouncer } from '@angular/cdk/a11y';
import { ChangeDetectionStrategy, Component, inject, signal } from '@angular/core';
import { FormControl, ReactiveFormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatChipsModule } from '@angular/material/chips';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatIconModule } from '@angular/material/icon';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/form-field";
import * as i2 from "@angular/material/chips";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/material/icon";
/**
 * @title Chips in reactive forms
 */
export class ChipsReactiveFormExample {
    constructor() {
        this.reactiveKeywords = signal(['angular', 'how-to', 'tutorial', 'accessibility']);
        this.formControl = new FormControl(['angular']);
        this.announcer = inject(LiveAnnouncer);
    }
    removeReactiveKeyword(keyword) {
        this.reactiveKeywords.update(keywords => {
            const index = keywords.indexOf(keyword);
            if (index < 0) {
                return keywords;
            }
            keywords.splice(index, 1);
            this.announcer.announce(`removed ${keyword} from reactive form`);
            return [...keywords];
        });
    }
    addReactiveKeyword(event) {
        const value = (event.value || '').trim();
        // Add our keyword
        if (value) {
            this.reactiveKeywords.update(keywords => [...keywords, value]);
            this.announcer.announce(`added ${value} to reactive form`);
        }
        // Clear the input value
        event.chipInput.clear();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: ChipsReactiveFormExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.1.0", type: ChipsReactiveFormExample, isStandalone: true, selector: "chips-reactive-form-example", ngImport: i0, template: "<section>\n  <h4>Chips inside of a Reactive form</h4>\n  <mat-form-field class=\"example-form-field\">\n    <mat-label>Video keywords</mat-label>\n    <mat-chip-grid #reactiveChipGrid aria-label=\"Enter reactive form keywords\" [formControl]=\"formControl\">\n    @for (keyword of reactiveKeywords(); track keyword) {\n      <mat-chip-row (removed)=\"removeReactiveKeyword(keyword)\">\n        {{keyword}}\n      <button matChipRemove aria-label=\"'remove reactive form' + keyword\">\n        <mat-icon>cancel</mat-icon>\n      </button>\n      </mat-chip-row>\n    }\n    </mat-chip-grid>\n    <input\n      placeholder=\"New keyword...\"\n      [matChipInputFor]=\"reactiveChipGrid\"\n      (matChipInputTokenEnd)=\"addReactiveKeyword($event)\"\n    />\n  </mat-form-field>\n</section>", styles: [".example-form-field {\n    width: 100%;\n}\n"], dependencies: [{ kind: "ngmodule", type: MatButtonModule }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i1.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i1.MatLabel, selector: "mat-label" }, { kind: "ngmodule", type: MatChipsModule }, { kind: "component", type: i2.MatChipGrid, selector: "mat-chip-grid", inputs: ["disabled", "placeholder", "required", "value", "errorStateMatcher"], outputs: ["change", "valueChange"] }, { kind: "directive", type: i2.MatChipInput, selector: "input[matChipInputFor]", inputs: ["matChipInputFor", "matChipInputAddOnBlur", "matChipInputSeparatorKeyCodes", "placeholder", "id", "disabled"], outputs: ["matChipInputTokenEnd"], exportAs: ["matChipInput", "matChipInputFor"] }, { kind: "directive", type: i2.MatChipRemove, selector: "[matChipRemove]" }, { kind: "component", type: i2.MatChipRow, selector: "mat-chip-row, [mat-chip-row], mat-basic-chip-row, [mat-basic-chip-row]", inputs: ["editable"], outputs: ["edited"] }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: ChipsReactiveFormExample, decorators: [{
            type: Component,
            args: [{ selector: 'chips-reactive-form-example', standalone: true, imports: [
                        MatButtonModule,
                        MatFormFieldModule,
                        MatChipsModule,
                        ReactiveFormsModule,
                        MatIconModule,
                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: "<section>\n  <h4>Chips inside of a Reactive form</h4>\n  <mat-form-field class=\"example-form-field\">\n    <mat-label>Video keywords</mat-label>\n    <mat-chip-grid #reactiveChipGrid aria-label=\"Enter reactive form keywords\" [formControl]=\"formControl\">\n    @for (keyword of reactiveKeywords(); track keyword) {\n      <mat-chip-row (removed)=\"removeReactiveKeyword(keyword)\">\n        {{keyword}}\n      <button matChipRemove aria-label=\"'remove reactive form' + keyword\">\n        <mat-icon>cancel</mat-icon>\n      </button>\n      </mat-chip-row>\n    }\n    </mat-chip-grid>\n    <input\n      placeholder=\"New keyword...\"\n      [matChipInputFor]=\"reactiveChipGrid\"\n      (matChipInputTokenEnd)=\"addReactiveKeyword($event)\"\n    />\n  </mat-form-field>\n</section>", styles: [".example-form-field {\n    width: 100%;\n}\n"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpcHMtcmVhY3RpdmUtZm9ybS1leGFtcGxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMtZXhhbXBsZXMvbWF0ZXJpYWwvY2hpcHMvY2hpcHMtcmVhY3RpdmUtZm9ybS9jaGlwcy1yZWFjdGl2ZS1mb3JtLWV4YW1wbGUudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy1leGFtcGxlcy9tYXRlcmlhbC9jaGlwcy9jaGlwcy1yZWFjdGl2ZS1mb3JtL2NoaXBzLXJlYWN0aXZlLWZvcm0tZXhhbXBsZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRCxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDakYsT0FBTyxFQUFDLFdBQVcsRUFBRSxtQkFBbUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ2hFLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUN6RCxPQUFPLEVBQW9CLGNBQWMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQzFFLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQ2hFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQzs7Ozs7O0FBRXJEOztHQUVHO0FBZUgsTUFBTSxPQUFPLHdCQUF3QjtJQWRyQztRQWVXLHFCQUFnQixHQUFHLE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUM7UUFDOUUsZ0JBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFFcEQsY0FBUyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztLQTJCbkM7SUF6QkMscUJBQXFCLENBQUMsT0FBZTtRQUNuQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3RDLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDeEMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUM7Z0JBQ2QsT0FBTyxRQUFRLENBQUM7WUFDbEIsQ0FBQztZQUVELFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFdBQVcsT0FBTyxxQkFBcUIsQ0FBQyxDQUFDO1lBQ2pFLE9BQU8sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGtCQUFrQixDQUFDLEtBQXdCO1FBQ3pDLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUV6QyxrQkFBa0I7UUFDbEIsSUFBSSxLQUFLLEVBQUUsQ0FBQztZQUNWLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDL0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxLQUFLLG1CQUFtQixDQUFDLENBQUM7UUFDN0QsQ0FBQztRQUVELHdCQUF3QjtRQUN4QixLQUFLLENBQUMsU0FBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzNCLENBQUM7OEdBOUJVLHdCQUF3QjtrR0FBeEIsd0JBQXdCLHVGQ3pCckMscXhCQW9CVSxxR0RITixlQUFlLDhCQUNmLGtCQUFrQiwwU0FDbEIsY0FBYyw0dUJBQ2QsbUJBQW1CLHlUQUNuQixhQUFhOzsyRkFJSix3QkFBd0I7a0JBZHBDLFNBQVM7K0JBQ0UsNkJBQTZCLGNBRzNCLElBQUksV0FDUDt3QkFDUCxlQUFlO3dCQUNmLGtCQUFrQjt3QkFDbEIsY0FBYzt3QkFDZCxtQkFBbUI7d0JBQ25CLGFBQWE7cUJBQ2QsbUJBQ2dCLHVCQUF1QixDQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xpdmVBbm5vdW5jZXJ9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgaW5qZWN0LCBzaWduYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtGb3JtQ29udHJvbCwgUmVhY3RpdmVGb3Jtc01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtNYXRCdXR0b25Nb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2J1dHRvbic7XG5pbXBvcnQge01hdENoaXBJbnB1dEV2ZW50LCBNYXRDaGlwc01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvY2hpcHMnO1xuaW1wb3J0IHtNYXRGb3JtRmllbGRNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHtNYXRJY29uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pY29uJztcblxuLyoqXG4gKiBAdGl0bGUgQ2hpcHMgaW4gcmVhY3RpdmUgZm9ybXNcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY2hpcHMtcmVhY3RpdmUtZm9ybS1leGFtcGxlJyxcbiAgdGVtcGxhdGVVcmw6ICdjaGlwcy1yZWFjdGl2ZS1mb3JtLWV4YW1wbGUuaHRtbCcsXG4gIHN0eWxlVXJsOiAnY2hpcHMtcmVhY3RpdmUtZm9ybS1leGFtcGxlLmNzcycsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtcbiAgICBNYXRCdXR0b25Nb2R1bGUsXG4gICAgTWF0Rm9ybUZpZWxkTW9kdWxlLFxuICAgIE1hdENoaXBzTW9kdWxlLFxuICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgTWF0SWNvbk1vZHVsZSxcbiAgXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIENoaXBzUmVhY3RpdmVGb3JtRXhhbXBsZSB7XG4gIHJlYWRvbmx5IHJlYWN0aXZlS2V5d29yZHMgPSBzaWduYWwoWydhbmd1bGFyJywgJ2hvdy10bycsICd0dXRvcmlhbCcsICdhY2Nlc3NpYmlsaXR5J10pO1xuICByZWFkb25seSBmb3JtQ29udHJvbCA9IG5ldyBGb3JtQ29udHJvbChbJ2FuZ3VsYXInXSk7XG5cbiAgYW5ub3VuY2VyID0gaW5qZWN0KExpdmVBbm5vdW5jZXIpO1xuXG4gIHJlbW92ZVJlYWN0aXZlS2V5d29yZChrZXl3b3JkOiBzdHJpbmcpIHtcbiAgICB0aGlzLnJlYWN0aXZlS2V5d29yZHMudXBkYXRlKGtleXdvcmRzID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0ga2V5d29yZHMuaW5kZXhPZihrZXl3b3JkKTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuIGtleXdvcmRzO1xuICAgICAgfVxuXG4gICAgICBrZXl3b3Jkcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgdGhpcy5hbm5vdW5jZXIuYW5ub3VuY2UoYHJlbW92ZWQgJHtrZXl3b3JkfSBmcm9tIHJlYWN0aXZlIGZvcm1gKTtcbiAgICAgIHJldHVybiBbLi4ua2V5d29yZHNdO1xuICAgIH0pO1xuICB9XG5cbiAgYWRkUmVhY3RpdmVLZXl3b3JkKGV2ZW50OiBNYXRDaGlwSW5wdXRFdmVudCk6IHZvaWQge1xuICAgIGNvbnN0IHZhbHVlID0gKGV2ZW50LnZhbHVlIHx8ICcnKS50cmltKCk7XG5cbiAgICAvLyBBZGQgb3VyIGtleXdvcmRcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMucmVhY3RpdmVLZXl3b3Jkcy51cGRhdGUoa2V5d29yZHMgPT4gWy4uLmtleXdvcmRzLCB2YWx1ZV0pO1xuICAgICAgdGhpcy5hbm5vdW5jZXIuYW5ub3VuY2UoYGFkZGVkICR7dmFsdWV9IHRvIHJlYWN0aXZlIGZvcm1gKTtcbiAgICB9XG5cbiAgICAvLyBDbGVhciB0aGUgaW5wdXQgdmFsdWVcbiAgICBldmVudC5jaGlwSW5wdXQhLmNsZWFyKCk7XG4gIH1cbn1cbiIsIjxzZWN0aW9uPlxuICA8aDQ+Q2hpcHMgaW5zaWRlIG9mIGEgUmVhY3RpdmUgZm9ybTwvaDQ+XG4gIDxtYXQtZm9ybS1maWVsZCBjbGFzcz1cImV4YW1wbGUtZm9ybS1maWVsZFwiPlxuICAgIDxtYXQtbGFiZWw+VmlkZW8ga2V5d29yZHM8L21hdC1sYWJlbD5cbiAgICA8bWF0LWNoaXAtZ3JpZCAjcmVhY3RpdmVDaGlwR3JpZCBhcmlhLWxhYmVsPVwiRW50ZXIgcmVhY3RpdmUgZm9ybSBrZXl3b3Jkc1wiIFtmb3JtQ29udHJvbF09XCJmb3JtQ29udHJvbFwiPlxuICAgIEBmb3IgKGtleXdvcmQgb2YgcmVhY3RpdmVLZXl3b3JkcygpOyB0cmFjayBrZXl3b3JkKSB7XG4gICAgICA8bWF0LWNoaXAtcm93IChyZW1vdmVkKT1cInJlbW92ZVJlYWN0aXZlS2V5d29yZChrZXl3b3JkKVwiPlxuICAgICAgICB7e2tleXdvcmR9fVxuICAgICAgPGJ1dHRvbiBtYXRDaGlwUmVtb3ZlIGFyaWEtbGFiZWw9XCIncmVtb3ZlIHJlYWN0aXZlIGZvcm0nICsga2V5d29yZFwiPlxuICAgICAgICA8bWF0LWljb24+Y2FuY2VsPC9tYXQtaWNvbj5cbiAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9tYXQtY2hpcC1yb3c+XG4gICAgfVxuICAgIDwvbWF0LWNoaXAtZ3JpZD5cbiAgICA8aW5wdXRcbiAgICAgIHBsYWNlaG9sZGVyPVwiTmV3IGtleXdvcmQuLi5cIlxuICAgICAgW21hdENoaXBJbnB1dEZvcl09XCJyZWFjdGl2ZUNoaXBHcmlkXCJcbiAgICAgIChtYXRDaGlwSW5wdXRUb2tlbkVuZCk9XCJhZGRSZWFjdGl2ZUtleXdvcmQoJGV2ZW50KVwiXG4gICAgLz5cbiAgPC9tYXQtZm9ybS1maWVsZD5cbjwvc2VjdGlvbj4iXX0=