import { LiveAnnouncer } from '@angular/cdk/a11y';
import { ChangeDetectionStrategy, Component, inject, signal } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatChipsModule } from '@angular/material/chips';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatIconModule } from '@angular/material/icon';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/form-field";
import * as i2 from "@angular/material/chips";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/material/icon";
/**
 * @title Chips in template-driven forms
 */
export class ChipsTemplateFormExample {
    constructor() {
        this.templateKeywords = signal(['angular', 'how-to', 'tutorial', 'accessibility']);
        this.announcer = inject(LiveAnnouncer);
    }
    removeTemplateKeyword(keyword) {
        this.templateKeywords.update(keywords => {
            const index = keywords.indexOf(keyword);
            if (index < 0) {
                return keywords;
            }
            keywords.splice(index, 1);
            this.announcer.announce(`removed ${keyword} from template form`);
            return [...keywords];
        });
    }
    addTemplateKeyword(event) {
        const value = (event.value || '').trim();
        // Add our keyword
        if (value) {
            this.templateKeywords.update(keywords => [...keywords, value]);
            this.announcer.announce(`added ${value} to template form`);
        }
        // Clear the input value
        event.chipInput.clear();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.0-next.2", ngImport: i0, type: ChipsTemplateFormExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.0-next.2", type: ChipsTemplateFormExample, isStandalone: true, selector: "chips-template-form-example", ngImport: i0, template: "<section>\n  <h4>Chips inside of a Template-driven form</h4>\n  <mat-form-field class=\"example-form-field\">\n    <mat-label>Video keywords</mat-label>\n    <mat-chip-grid #templateChipGrid aria-label=\"Enter template form keywords\" [(ngModel)]=\"templateKeywords\">\n    @for (keyword of templateKeywords(); track keyword) {\n      <mat-chip-row (removed)=\"removeTemplateKeyword(keyword)\">\n        {{keyword}}\n      <button matChipRemove aria-label=\"'remove template form' + keyword\">\n        <mat-icon>cancel</mat-icon>\n      </button>\n      </mat-chip-row>\n    }\n    </mat-chip-grid>\n    <input\n      placeholder=\"New keyword...\"\n      [matChipInputFor]=\"templateChipGrid\"\n      (matChipInputTokenEnd)=\"addTemplateKeyword($event)\"\n    />\n  </mat-form-field>\n</section>\n", styles: [".example-form-field {\n    width: 100%;\n}\n"], dependencies: [{ kind: "ngmodule", type: MatButtonModule }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i1.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i1.MatLabel, selector: "mat-label" }, { kind: "ngmodule", type: MatChipsModule }, { kind: "component", type: i2.MatChipGrid, selector: "mat-chip-grid", inputs: ["disabled", "placeholder", "required", "value", "errorStateMatcher"], outputs: ["change", "valueChange"] }, { kind: "directive", type: i2.MatChipInput, selector: "input[matChipInputFor]", inputs: ["matChipInputFor", "matChipInputAddOnBlur", "matChipInputSeparatorKeyCodes", "placeholder", "id", "disabled"], outputs: ["matChipInputTokenEnd"], exportAs: ["matChipInput", "matChipInputFor"] }, { kind: "directive", type: i2.MatChipRemove, selector: "[matChipRemove]" }, { kind: "component", type: i2.MatChipRow, selector: "mat-chip-row, [mat-chip-row], mat-basic-chip-row, [mat-basic-chip-row]", inputs: ["editable"], outputs: ["edited"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.0-next.2", ngImport: i0, type: ChipsTemplateFormExample, decorators: [{
            type: Component,
            args: [{ selector: 'chips-template-form-example', standalone: true, imports: [MatButtonModule, MatFormFieldModule, MatChipsModule, FormsModule, MatIconModule], changeDetection: ChangeDetectionStrategy.OnPush, template: "<section>\n  <h4>Chips inside of a Template-driven form</h4>\n  <mat-form-field class=\"example-form-field\">\n    <mat-label>Video keywords</mat-label>\n    <mat-chip-grid #templateChipGrid aria-label=\"Enter template form keywords\" [(ngModel)]=\"templateKeywords\">\n    @for (keyword of templateKeywords(); track keyword) {\n      <mat-chip-row (removed)=\"removeTemplateKeyword(keyword)\">\n        {{keyword}}\n      <button matChipRemove aria-label=\"'remove template form' + keyword\">\n        <mat-icon>cancel</mat-icon>\n      </button>\n      </mat-chip-row>\n    }\n    </mat-chip-grid>\n    <input\n      placeholder=\"New keyword...\"\n      [matChipInputFor]=\"templateChipGrid\"\n      (matChipInputTokenEnd)=\"addTemplateKeyword($event)\"\n    />\n  </mat-form-field>\n</section>\n", styles: [".example-form-field {\n    width: 100%;\n}\n"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpcHMtdGVtcGxhdGUtZm9ybS1leGFtcGxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMtZXhhbXBsZXMvbWF0ZXJpYWwvY2hpcHMvY2hpcHMtdGVtcGxhdGUtZm9ybS9jaGlwcy10ZW1wbGF0ZS1mb3JtLWV4YW1wbGUudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy1leGFtcGxlcy9tYXRlcmlhbC9jaGlwcy9jaGlwcy10ZW1wbGF0ZS1mb3JtL2NoaXBzLXRlbXBsYXRlLWZvcm0tZXhhbXBsZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRCxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDakYsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUN6RCxPQUFPLEVBQW9CLGNBQWMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQzFFLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQ2hFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQzs7Ozs7O0FBRXJEOztHQUVHO0FBU0gsTUFBTSxPQUFPLHdCQUF3QjtJQVJyQztRQVNXLHFCQUFnQixHQUFHLE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUM7UUFFdkYsY0FBUyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztLQTJCbkM7SUF6QkMscUJBQXFCLENBQUMsT0FBZTtRQUNuQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3RDLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDeEMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUM7Z0JBQ2QsT0FBTyxRQUFRLENBQUM7WUFDbEIsQ0FBQztZQUVELFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFdBQVcsT0FBTyxxQkFBcUIsQ0FBQyxDQUFDO1lBQ2pFLE9BQU8sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGtCQUFrQixDQUFDLEtBQXdCO1FBQ3pDLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUV6QyxrQkFBa0I7UUFDbEIsSUFBSSxLQUFLLEVBQUUsQ0FBQztZQUNWLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDL0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxLQUFLLG1CQUFtQixDQUFDLENBQUM7UUFDN0QsQ0FBQztRQUVELHdCQUF3QjtRQUN4QixLQUFLLENBQUMsU0FBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzNCLENBQUM7cUhBN0JVLHdCQUF3Qjt5R0FBeEIsd0JBQXdCLHVGQ25CckMsaXlCQXFCQSxxR0RMWSxlQUFlLDhCQUFFLGtCQUFrQiwwU0FBRSxjQUFjLDR1QkFBRSxXQUFXLDhWQUFFLGFBQWE7O2tHQUc5RSx3QkFBd0I7a0JBUnBDLFNBQVM7K0JBQ0UsNkJBQTZCLGNBRzNCLElBQUksV0FDUCxDQUFDLGVBQWUsRUFBRSxrQkFBa0IsRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLGFBQWEsQ0FBQyxtQkFDekUsdUJBQXVCLENBQUMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TGl2ZUFubm91bmNlcn0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBpbmplY3QsIHNpZ25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Zvcm1zTW9kdWxlfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge01hdEJ1dHRvbk1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvYnV0dG9uJztcbmltcG9ydCB7TWF0Q2hpcElucHV0RXZlbnQsIE1hdENoaXBzTW9kdWxlfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jaGlwcyc7XG5pbXBvcnQge01hdEZvcm1GaWVsZE1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZm9ybS1maWVsZCc7XG5pbXBvcnQge01hdEljb25Nb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2ljb24nO1xuXG4vKipcbiAqIEB0aXRsZSBDaGlwcyBpbiB0ZW1wbGF0ZS1kcml2ZW4gZm9ybXNcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY2hpcHMtdGVtcGxhdGUtZm9ybS1leGFtcGxlJyxcbiAgdGVtcGxhdGVVcmw6ICdjaGlwcy10ZW1wbGF0ZS1mb3JtLWV4YW1wbGUuaHRtbCcsXG4gIHN0eWxlVXJsOiAnY2hpcHMtdGVtcGxhdGUtZm9ybS1leGFtcGxlLmNzcycsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtNYXRCdXR0b25Nb2R1bGUsIE1hdEZvcm1GaWVsZE1vZHVsZSwgTWF0Q2hpcHNNb2R1bGUsIEZvcm1zTW9kdWxlLCBNYXRJY29uTW9kdWxlXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIENoaXBzVGVtcGxhdGVGb3JtRXhhbXBsZSB7XG4gIHJlYWRvbmx5IHRlbXBsYXRlS2V5d29yZHMgPSBzaWduYWwoWydhbmd1bGFyJywgJ2hvdy10bycsICd0dXRvcmlhbCcsICdhY2Nlc3NpYmlsaXR5J10pO1xuXG4gIGFubm91bmNlciA9IGluamVjdChMaXZlQW5ub3VuY2VyKTtcblxuICByZW1vdmVUZW1wbGF0ZUtleXdvcmQoa2V5d29yZDogc3RyaW5nKSB7XG4gICAgdGhpcy50ZW1wbGF0ZUtleXdvcmRzLnVwZGF0ZShrZXl3b3JkcyA9PiB7XG4gICAgICBjb25zdCBpbmRleCA9IGtleXdvcmRzLmluZGV4T2Yoa2V5d29yZCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiBrZXl3b3JkcztcbiAgICAgIH1cblxuICAgICAga2V5d29yZHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIHRoaXMuYW5ub3VuY2VyLmFubm91bmNlKGByZW1vdmVkICR7a2V5d29yZH0gZnJvbSB0ZW1wbGF0ZSBmb3JtYCk7XG4gICAgICByZXR1cm4gWy4uLmtleXdvcmRzXTtcbiAgICB9KTtcbiAgfVxuXG4gIGFkZFRlbXBsYXRlS2V5d29yZChldmVudDogTWF0Q2hpcElucHV0RXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCB2YWx1ZSA9IChldmVudC52YWx1ZSB8fCAnJykudHJpbSgpO1xuXG4gICAgLy8gQWRkIG91ciBrZXl3b3JkXG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlS2V5d29yZHMudXBkYXRlKGtleXdvcmRzID0+IFsuLi5rZXl3b3JkcywgdmFsdWVdKTtcbiAgICAgIHRoaXMuYW5ub3VuY2VyLmFubm91bmNlKGBhZGRlZCAke3ZhbHVlfSB0byB0ZW1wbGF0ZSBmb3JtYCk7XG4gICAgfVxuXG4gICAgLy8gQ2xlYXIgdGhlIGlucHV0IHZhbHVlXG4gICAgZXZlbnQuY2hpcElucHV0IS5jbGVhcigpO1xuICB9XG59XG4iLCI8c2VjdGlvbj5cbiAgPGg0PkNoaXBzIGluc2lkZSBvZiBhIFRlbXBsYXRlLWRyaXZlbiBmb3JtPC9oND5cbiAgPG1hdC1mb3JtLWZpZWxkIGNsYXNzPVwiZXhhbXBsZS1mb3JtLWZpZWxkXCI+XG4gICAgPG1hdC1sYWJlbD5WaWRlbyBrZXl3b3JkczwvbWF0LWxhYmVsPlxuICAgIDxtYXQtY2hpcC1ncmlkICN0ZW1wbGF0ZUNoaXBHcmlkIGFyaWEtbGFiZWw9XCJFbnRlciB0ZW1wbGF0ZSBmb3JtIGtleXdvcmRzXCIgWyhuZ01vZGVsKV09XCJ0ZW1wbGF0ZUtleXdvcmRzXCI+XG4gICAgQGZvciAoa2V5d29yZCBvZiB0ZW1wbGF0ZUtleXdvcmRzKCk7IHRyYWNrIGtleXdvcmQpIHtcbiAgICAgIDxtYXQtY2hpcC1yb3cgKHJlbW92ZWQpPVwicmVtb3ZlVGVtcGxhdGVLZXl3b3JkKGtleXdvcmQpXCI+XG4gICAgICAgIHt7a2V5d29yZH19XG4gICAgICA8YnV0dG9uIG1hdENoaXBSZW1vdmUgYXJpYS1sYWJlbD1cIidyZW1vdmUgdGVtcGxhdGUgZm9ybScgKyBrZXl3b3JkXCI+XG4gICAgICAgIDxtYXQtaWNvbj5jYW5jZWw8L21hdC1pY29uPlxuICAgICAgPC9idXR0b24+XG4gICAgICA8L21hdC1jaGlwLXJvdz5cbiAgICB9XG4gICAgPC9tYXQtY2hpcC1ncmlkPlxuICAgIDxpbnB1dFxuICAgICAgcGxhY2Vob2xkZXI9XCJOZXcga2V5d29yZC4uLlwiXG4gICAgICBbbWF0Q2hpcElucHV0Rm9yXT1cInRlbXBsYXRlQ2hpcEdyaWRcIlxuICAgICAgKG1hdENoaXBJbnB1dFRva2VuRW5kKT1cImFkZFRlbXBsYXRlS2V5d29yZCgkZXZlbnQpXCJcbiAgICAvPlxuICA8L21hdC1mb3JtLWZpZWxkPlxuPC9zZWN0aW9uPlxuIl19