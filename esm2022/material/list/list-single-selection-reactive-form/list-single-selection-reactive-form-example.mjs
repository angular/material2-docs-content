import { Component } from '@angular/core';
import { FormControl, FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatListModule } from '@angular/material/list';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/list";
import * as i2 from "@angular/forms";
/**
 * @title List with single selection using Reactive forms
 */
export class ListSingleSelectionReactiveFormExample {
    constructor() {
        this.shoes = [
            { value: 'boots', name: 'Boots' },
            { value: 'clogs', name: 'Clogs' },
            { value: 'loafers', name: 'Loafers' },
            { value: 'moccasins', name: 'Moccasins' },
            { value: 'sneakers', name: 'Sneakers' },
        ];
        this.shoesControl = new FormControl();
        this.form = new FormGroup({
            clothes: this.shoesControl,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.0-next.2", ngImport: i0, type: ListSingleSelectionReactiveFormExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.0-next.2", type: ListSingleSelectionReactiveFormExample, isStandalone: true, selector: "list-single-selection-reactive-form-example", ngImport: i0, template: "<form [formGroup]=\"form\">\n  <mat-selection-list #shoesList [formControl]=\"shoesControl\" name=\"shoes\" [multiple]=\"false\">\n    @for (shoe of shoes; track shoe) {\n      <mat-list-option [value]=\"shoe.value\">{{shoe.name}}</mat-list-option>\n    }\n  </mat-selection-list>\n  <p>\n     Option selected: {{shoesControl.value ? shoesControl.value[0] : 'None'}} \n  </p>\n</form> ", dependencies: [{ kind: "ngmodule", type: MatListModule }, { kind: "component", type: i1.MatSelectionList, selector: "mat-selection-list", inputs: ["color", "compareWith", "multiple", "hideSingleSelectionIndicator", "disabled"], outputs: ["selectionChange"], exportAs: ["matSelectionList"] }, { kind: "component", type: i1.MatListOption, selector: "mat-list-option", inputs: ["togglePosition", "checkboxPosition", "color", "value", "selected"], outputs: ["selectedChange"], exportAs: ["matListOption"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.0-next.2", ngImport: i0, type: ListSingleSelectionReactiveFormExample, decorators: [{
            type: Component,
            args: [{ selector: 'list-single-selection-reactive-form-example', standalone: true, imports: [MatListModule, FormsModule, ReactiveFormsModule], template: "<form [formGroup]=\"form\">\n  <mat-selection-list #shoesList [formControl]=\"shoesControl\" name=\"shoes\" [multiple]=\"false\">\n    @for (shoe of shoes; track shoe) {\n      <mat-list-option [value]=\"shoe.value\">{{shoe.name}}</mat-list-option>\n    }\n  </mat-selection-list>\n  <p>\n     Option selected: {{shoesControl.value ? shoesControl.value[0] : 'None'}} \n  </p>\n</form> " }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1zaW5nbGUtc2VsZWN0aW9uLXJlYWN0aXZlLWZvcm0tZXhhbXBsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzLWV4YW1wbGVzL21hdGVyaWFsL2xpc3QvbGlzdC1zaW5nbGUtc2VsZWN0aW9uLXJlYWN0aXZlLWZvcm0vbGlzdC1zaW5nbGUtc2VsZWN0aW9uLXJlYWN0aXZlLWZvcm0tZXhhbXBsZS50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzLWV4YW1wbGVzL21hdGVyaWFsL2xpc3QvbGlzdC1zaW5nbGUtc2VsZWN0aW9uLXJlYWN0aXZlLWZvcm0vbGlzdC1zaW5nbGUtc2VsZWN0aW9uLWZvcm0tZXhhbXBsZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEMsT0FBTyxFQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEYsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHdCQUF3QixDQUFDOzs7O0FBTXJEOztHQUVHO0FBT0gsTUFBTSxPQUFPLHNDQUFzQztJQVdqRDtRQVRBLFVBQUssR0FBWTtZQUNmLEVBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFDO1lBQy9CLEVBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFDO1lBQy9CLEVBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFDO1lBQ25DLEVBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFDO1lBQ3ZDLEVBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFDO1NBQ3RDLENBQUM7UUFDRixpQkFBWSxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFHL0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLFNBQVMsQ0FBQztZQUN4QixPQUFPLEVBQUUsSUFBSSxDQUFDLFlBQVk7U0FDM0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztxSEFmVSxzQ0FBc0M7eUdBQXRDLHNDQUFzQyx1R0NqQm5ELG1ZQVNRLDJDRE1JLGFBQWEsNGRBQUUsV0FBVywyWUFBRSxtQkFBbUI7O2tHQUU5QyxzQ0FBc0M7a0JBTmxELFNBQVM7K0JBQ0UsNkNBQTZDLGNBRTNDLElBQUksV0FDUCxDQUFDLGFBQWEsRUFBRSxXQUFXLEVBQUUsbUJBQW1CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Zvcm1Db250cm9sLCBGb3JtR3JvdXAsIEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge01hdExpc3RNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2xpc3QnO1xuXG5pbnRlcmZhY2UgU2hvZXMge1xuICB2YWx1ZTogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG59XG4vKipcbiAqIEB0aXRsZSBMaXN0IHdpdGggc2luZ2xlIHNlbGVjdGlvbiB1c2luZyBSZWFjdGl2ZSBmb3Jtc1xuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdsaXN0LXNpbmdsZS1zZWxlY3Rpb24tcmVhY3RpdmUtZm9ybS1leGFtcGxlJyxcbiAgdGVtcGxhdGVVcmw6ICdsaXN0LXNpbmdsZS1zZWxlY3Rpb24tZm9ybS1leGFtcGxlLmh0bWwnLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBpbXBvcnRzOiBbTWF0TGlzdE1vZHVsZSwgRm9ybXNNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGVdLFxufSlcbmV4cG9ydCBjbGFzcyBMaXN0U2luZ2xlU2VsZWN0aW9uUmVhY3RpdmVGb3JtRXhhbXBsZSB7XG4gIGZvcm06IEZvcm1Hcm91cDtcbiAgc2hvZXM6IFNob2VzW10gPSBbXG4gICAge3ZhbHVlOiAnYm9vdHMnLCBuYW1lOiAnQm9vdHMnfSxcbiAgICB7dmFsdWU6ICdjbG9ncycsIG5hbWU6ICdDbG9ncyd9LFxuICAgIHt2YWx1ZTogJ2xvYWZlcnMnLCBuYW1lOiAnTG9hZmVycyd9LFxuICAgIHt2YWx1ZTogJ21vY2Nhc2lucycsIG5hbWU6ICdNb2NjYXNpbnMnfSxcbiAgICB7dmFsdWU6ICdzbmVha2VycycsIG5hbWU6ICdTbmVha2Vycyd9LFxuICBdO1xuICBzaG9lc0NvbnRyb2wgPSBuZXcgRm9ybUNvbnRyb2woKTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmZvcm0gPSBuZXcgRm9ybUdyb3VwKHtcbiAgICAgIGNsb3RoZXM6IHRoaXMuc2hvZXNDb250cm9sLFxuICAgIH0pO1xuICB9XG59XG4iLCI8Zm9ybSBbZm9ybUdyb3VwXT1cImZvcm1cIj5cbiAgPG1hdC1zZWxlY3Rpb24tbGlzdCAjc2hvZXNMaXN0IFtmb3JtQ29udHJvbF09XCJzaG9lc0NvbnRyb2xcIiBuYW1lPVwic2hvZXNcIiBbbXVsdGlwbGVdPVwiZmFsc2VcIj5cbiAgICBAZm9yIChzaG9lIG9mIHNob2VzOyB0cmFjayBzaG9lKSB7XG4gICAgICA8bWF0LWxpc3Qtb3B0aW9uIFt2YWx1ZV09XCJzaG9lLnZhbHVlXCI+e3tzaG9lLm5hbWV9fTwvbWF0LWxpc3Qtb3B0aW9uPlxuICAgIH1cbiAgPC9tYXQtc2VsZWN0aW9uLWxpc3Q+XG4gIDxwPlxuICAgICBPcHRpb24gc2VsZWN0ZWQ6IHt7c2hvZXNDb250cm9sLnZhbHVlID8gc2hvZXNDb250cm9sLnZhbHVlWzBdIDogJ05vbmUnfX0gXG4gIDwvcD5cbjwvZm9ybT4gIl19