{"version":3,"file":"cdk-tree.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/cdk/tree/cdk-tree-flat-children-accessor/cdk-tree-flat-children-accessor-example.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/cdk/tree/cdk-tree-flat-level-accessor/cdk-tree-flat-level-accessor-example.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/cdk/tree/cdk-tree-flat/cdk-tree-flat-example.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/cdk/tree/cdk-tree-nested-level-accessor/cdk-tree-nested-level-accessor-example.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/cdk/tree/cdk-tree-nested-children-accessor/cdk-tree-nested-children-accessor-example.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/cdk/tree/cdk-tree-nested/cdk-tree-nested-example.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/cdk/tree/cdk-tree-complex/cdk-tree-complex-example.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/cdk/tree/cdk-tree-custom-key-manager/cdk-tree-custom-key-manager-example.ts"],"sourcesContent":["import {ArrayDataSource} from '@angular/cdk/collections';\nimport {CdkTree, CdkTreeModule} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {timer} from 'rxjs';\nimport {mapTo} from 'rxjs/operators';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n */\ninterface NestedFoodNode {\n  name: string;\n  children?: NestedFoodNode[];\n}\n\nfunction flattenNodes(nodes: NestedFoodNode[]): NestedFoodNode[] {\n  const flattenedNodes = [];\n  for (const node of nodes) {\n    flattenedNodes.push(node);\n    if (node.children) {\n      flattenedNodes.push(...flattenNodes(node.children));\n    }\n  }\n  return flattenedNodes;\n}\n\n/**\n * @title Tree with flat nodes\n */\n@Component({\n  selector: 'cdk-tree-flat-children-accessor-example',\n  templateUrl: 'cdk-tree-flat-children-accessor-example.html',\n  styleUrls: ['cdk-tree-flat-children-accessor-example.css'],\n  imports: [CdkTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkTreeFlatChildrenAccessorExample {\n  @ViewChild(CdkTree)\n  tree!: CdkTree<NestedFoodNode>;\n\n  childrenAccessor = (dataNode: NestedFoodNode) => timer(100).pipe(mapTo(dataNode.children ?? []));\n\n  dataSource = new ArrayDataSource(EXAMPLE_DATA);\n\n  hasChild = (_: number, node: NestedFoodNode) => !!node.children?.length;\n\n  getParentNode(node: NestedFoodNode) {\n    for (const parent of flattenNodes(EXAMPLE_DATA)) {\n      if (parent.children?.includes(node)) {\n        return parent;\n      }\n    }\n\n    return null;\n  }\n\n  shouldRender(node: NestedFoodNode) {\n    let parent = this.getParentNode(node);\n    while (parent) {\n      if (!this.tree.isExpanded(parent)) {\n        return false;\n      }\n      parent = this.getParentNode(parent);\n    }\n    return true;\n  }\n}\n\nconst EXAMPLE_DATA: NestedFoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}],\n  },\n  {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\n      },\n      {\n        name: 'Orange',\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\n      },\n    ],\n  },\n];\n","import {ArrayDataSource} from '@angular/cdk/collections';\nimport {CdkTree, CdkTreeModule} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\n\n/** Flat node with expandable and level information */\ninterface FlatFoodNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n  isExpanded?: boolean;\n}\n\n/**\n * @title Tree with flat nodes\n */\n@Component({\n  selector: 'cdk-tree-flat-level-accessor-example',\n  templateUrl: 'cdk-tree-flat-level-accessor-example.html',\n  styleUrls: ['cdk-tree-flat-level-accessor-example.css'],\n  imports: [CdkTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkTreeFlatLevelAccessorExample {\n  @ViewChild(CdkTree)\n  tree: CdkTree<FlatFoodNode>;\n\n  levelAccessor = (dataNode: FlatFoodNode) => dataNode.level;\n\n  dataSource = new ArrayDataSource(EXAMPLE_DATA);\n\n  hasChild = (_: number, node: FlatFoodNode) => node.expandable;\n\n  getParentNode(node: FlatFoodNode) {\n    const nodeIndex = EXAMPLE_DATA.indexOf(node);\n\n    // Determine the node's parent by finding the first preceding node that's\n    // one level shallower.\n    for (let i = nodeIndex - 1; i >= 0; i--) {\n      if (EXAMPLE_DATA[i].level === node.level - 1) {\n        return EXAMPLE_DATA[i];\n      }\n    }\n\n    return null;\n  }\n\n  shouldRender(node: FlatFoodNode): boolean {\n    // This node should render if it is a root node or if all of its ancestors are expanded.\n    const parent = this.getParentNode(node);\n    return !parent || (!!this.tree?.isExpanded(parent) && this.shouldRender(parent));\n  }\n}\n\nconst EXAMPLE_DATA: FlatFoodNode[] = [\n  {\n    name: 'Fruit',\n    expandable: true,\n    level: 0,\n  },\n  {\n    name: 'Apple',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Banana',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Fruit loops',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Vegetables',\n    expandable: true,\n    level: 0,\n  },\n  {\n    name: 'Green',\n    expandable: true,\n    level: 1,\n  },\n  {\n    name: 'Broccoli',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Brussels sprouts',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Orange',\n    expandable: true,\n    level: 1,\n  },\n  {\n    name: 'Pumpkins',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Carrots',\n    expandable: false,\n    level: 2,\n  },\n];\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {ArrayDataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, CdkTreeModule} from '@angular/cdk/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\n/** Flat node with expandable and level information */\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n  isExpanded?: boolean;\n}\n\n/**\n * @title Tree with flat nodes\n */\n@Component({\n  selector: 'cdk-tree-flat-example',\n  templateUrl: 'cdk-tree-flat-example.html',\n  styleUrl: 'cdk-tree-flat-example.css',\n  imports: [CdkTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkTreeFlatExample {\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    node => node.level,\n    node => node.expandable,\n  );\n\n  dataSource = new ArrayDataSource(EXAMPLE_DATA);\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n\n  getParentNode(node: ExampleFlatNode) {\n    const nodeIndex = EXAMPLE_DATA.indexOf(node);\n\n    for (let i = nodeIndex - 1; i >= 0; i--) {\n      if (EXAMPLE_DATA[i].level === node.level - 1) {\n        return EXAMPLE_DATA[i];\n      }\n    }\n\n    return null;\n  }\n\n  shouldRender(node: ExampleFlatNode) {\n    let parent = this.getParentNode(node);\n    while (parent) {\n      if (!parent.isExpanded) {\n        return false;\n      }\n      parent = this.getParentNode(parent);\n    }\n    return true;\n  }\n}\n\nconst EXAMPLE_DATA: ExampleFlatNode[] = [\n  {\n    name: 'Fruit',\n    expandable: true,\n    level: 0,\n  },\n  {\n    name: 'Apple',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Banana',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Fruit loops',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Vegetables',\n    expandable: true,\n    level: 0,\n  },\n  {\n    name: 'Green',\n    expandable: true,\n    level: 1,\n  },\n  {\n    name: 'Broccoli',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Brussels sprouts',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Orange',\n    expandable: true,\n    level: 1,\n  },\n  {\n    name: 'Pumpkins',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Carrots',\n    expandable: false,\n    level: 2,\n  },\n];\n","import {ArrayDataSource} from '@angular/cdk/collections';\nimport {CdkTree, CdkTreeModule} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\n\n/** Flat node with expandable and level information */\ninterface FlatFoodNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n  isExpanded?: boolean;\n}\n\n/**\n * @title Tree with nested nodes and level accessor\n */\n@Component({\n  selector: 'cdk-tree-nested-level-accessor-example',\n  templateUrl: 'cdk-tree-nested-level-accessor-example.html',\n  styleUrls: ['cdk-tree-nested-level-accessor-example.css'],\n  imports: [CdkTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkTreeNestedLevelAccessorExample {\n  @ViewChild(CdkTree) tree: CdkTree<FlatFoodNode>;\n\n  levelAccessor = (dataNode: FlatFoodNode) => dataNode.level;\n\n  dataSource = new ArrayDataSource(EXAMPLE_DATA);\n\n  hasChild = (_: number, node: FlatFoodNode) => node.expandable;\n\n  getParentNode(node: FlatFoodNode) {\n    const nodeIndex = EXAMPLE_DATA.indexOf(node);\n\n    // Determine the node's parent by finding the first preceding node that's\n    // one level shallower.\n    for (let i = nodeIndex - 1; i >= 0; i--) {\n      if (EXAMPLE_DATA[i].level === node.level - 1) {\n        return EXAMPLE_DATA[i];\n      }\n    }\n\n    return null;\n  }\n\n  shouldRender(node: FlatFoodNode): boolean {\n    // This node should render if it is a root node or if all of its ancestors are expanded.\n    const parent = this.getParentNode(node);\n    return !parent || (!!this.tree?.isExpanded(parent) && this.shouldRender(parent));\n  }\n}\n\nconst EXAMPLE_DATA: FlatFoodNode[] = [\n  {\n    name: 'Fruit',\n    expandable: true,\n    level: 0,\n  },\n  {\n    name: 'Apple',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Banana',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Fruit loops',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Vegetables',\n    expandable: true,\n    level: 0,\n  },\n  {\n    name: 'Green',\n    expandable: true,\n    level: 1,\n  },\n  {\n    name: 'Broccoli',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Brussels sprouts',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Orange',\n    expandable: true,\n    level: 1,\n  },\n  {\n    name: 'Pumpkins',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Carrots',\n    expandable: false,\n    level: 2,\n  },\n];\n","import {ArrayDataSource} from '@angular/cdk/collections';\nimport {CdkTree, CdkTreeModule} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n */\ninterface NestedFoodNode {\n  name: string;\n  children?: NestedFoodNode[];\n}\n\nfunction flattenNodes(nodes: NestedFoodNode[]): NestedFoodNode[] {\n  const flattenedNodes = [];\n  for (const node of nodes) {\n    flattenedNodes.push(node);\n    if (node.children) {\n      flattenedNodes.push(...flattenNodes(node.children));\n    }\n  }\n  return flattenedNodes;\n}\n\n/**\n * @title Tree with nested nodes using childAccessor\n */\n@Component({\n  selector: 'cdk-tree-nested-children-accessor-example',\n  templateUrl: 'cdk-tree-nested-children-accessor-example.html',\n  styleUrls: ['cdk-tree-nested-children-accessor-example.css'],\n  imports: [CdkTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkTreeNestedChildrenAccessorExample {\n  @ViewChild(CdkTree) tree: CdkTree<NestedFoodNode>;\n\n  childrenAccessor = (dataNode: NestedFoodNode) => dataNode.children ?? [];\n\n  dataSource = new ArrayDataSource(EXAMPLE_DATA);\n\n  hasChild = (_: number, node: NestedFoodNode) => !!node.children && node.children.length > 0;\n\n  getParentNode(node: NestedFoodNode) {\n    for (const parent of flattenNodes(EXAMPLE_DATA)) {\n      if (parent.children?.includes(node)) {\n        return parent;\n      }\n    }\n\n    return null;\n  }\n\n  shouldRender(node: NestedFoodNode): boolean {\n    // This node should render if it is a root node or if all of its ancestors are expanded.\n    const parent = this.getParentNode(node);\n    return !parent || (!!this.tree?.isExpanded(parent) && this.shouldRender(parent));\n  }\n}\n\nconst EXAMPLE_DATA: NestedFoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}],\n  },\n  {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\n      },\n      {\n        name: 'Orange',\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\n      },\n    ],\n  },\n];\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {ArrayDataSource} from '@angular/cdk/collections';\nimport {NestedTreeControl, CdkTreeModule} from '@angular/cdk/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\n/**\n * @title Tree with nested nodes\n */\n@Component({\n  selector: 'cdk-tree-nested-example',\n  templateUrl: 'cdk-tree-nested-example.html',\n  styleUrl: 'cdk-tree-nested-example.css',\n  imports: [CdkTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkTreeNestedExample {\n  treeControl = new NestedTreeControl<FoodNode>(node => node.children);\n  dataSource = new ArrayDataSource(EXAMPLE_DATA);\n\n  hasChild = (_: number, node: FoodNode) => !!node.children && node.children.length > 0;\n}\n\nconst EXAMPLE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}],\n  },\n  {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\n      },\n      {\n        name: 'Orange',\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\n      },\n    ],\n  },\n];\n","import {CdkTreeModule} from '@angular/cdk/tree';\nimport {AsyncPipe} from '@angular/common';\nimport {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {BehaviorSubject, Observable, combineLatest, of as observableOf} from 'rxjs';\nimport {delay, map, shareReplay} from 'rxjs/operators';\n\ninterface BackendData {\n  id: string;\n  name: string;\n  parent?: string;\n  children?: string[];\n}\n\nclass FakeDataBackend {\n  private _getRandomDelayTime() {\n    // anywhere from 100 to 500ms.\n    return Math.floor(Math.random() * 400) + 100;\n  }\n\n  getChildren(id: string): Observable<BackendData[]> {\n    // first, find the specified ID in our tree\n    const item = EXAMPLE_DATA.get(id);\n    const children = item?.children ?? [];\n\n    return observableOf(children.map(childId => EXAMPLE_DATA.get(childId)!)).pipe(\n      delay(this._getRandomDelayTime()),\n    );\n  }\n\n  getRoots(): Observable<BackendData[]> {\n    return observableOf([...EXAMPLE_DATA.values()].filter(datum => !datum.parent)).pipe(\n      delay(this._getRandomDelayTime()),\n    );\n  }\n}\n\ntype LoadingState = 'INIT' | 'LOADING' | 'LOADED';\n\ninterface RawData {\n  id: string;\n  name: string;\n  parentId?: string;\n  childrenIds?: string[];\n  childrenLoading: LoadingState;\n}\n\nclass TransformedData {\n  constructor(public raw: RawData) {}\n\n  areChildrenLoading() {\n    return this.raw.childrenLoading === 'LOADING';\n  }\n\n  isExpandable() {\n    return (\n      (this.raw.childrenLoading === 'INIT' || this.raw.childrenLoading === 'LOADED') &&\n      !!this.raw.childrenIds?.length\n    );\n  }\n\n  isLeaf() {\n    return !this.isExpandable() && !this.areChildrenLoading();\n  }\n}\n\ninterface State {\n  rootIds: string[];\n  rootsLoading: LoadingState;\n  allData: Map<string, RawData>;\n  dataLoading: Map<string, LoadingState>;\n}\n\ntype ObservedValueOf<T> = T extends Observable<infer U> ? U : never;\n\ntype ObservedValuesOf<T extends readonly Observable<unknown>[]> = {\n  [K in keyof T]: ObservedValueOf<T[K]>;\n};\n\ntype TransformFn<T extends readonly Observable<unknown>[], U> = (\n  ...args: [...ObservedValuesOf<T>, State]\n) => U;\n\nclass ComplexDataStore {\n  private readonly _backend = new FakeDataBackend();\n\n  private _state = new BehaviorSubject<State>({\n    rootIds: [],\n    rootsLoading: 'INIT',\n    allData: new Map(),\n    dataLoading: new Map(),\n  });\n\n  private readonly _rootIds = this.select(state => state.rootIds);\n  private readonly _allData = this.select(state => state.allData);\n  private readonly _loadingData = this.select(state => state.dataLoading);\n  private readonly _rootsLoadingState = this.select(state => state.rootsLoading);\n  readonly areRootsLoading = this.select(\n    this._rootIds,\n    this._loadingData,\n    this._rootsLoadingState,\n    (rootIds, loading, rootsLoading) =>\n      rootsLoading !== 'LOADED' || rootIds.some(id => loading.get(id) !== 'LOADED'),\n  );\n  readonly roots = this.select(\n    this.areRootsLoading,\n    this._rootIds,\n    this._allData,\n    (rootsLoading, rootIds, data) => {\n      if (rootsLoading) {\n        return [];\n      }\n      return this._getDataByIds(rootIds, data);\n    },\n  );\n\n  getChildren(parentId: string) {\n    return this.select(this._allData, this._loadingData, (data, loading) => {\n      const parentData = data.get(parentId);\n      if (parentData?.childrenLoading !== 'LOADED') {\n        return [];\n      }\n      const childIds = parentData.childrenIds ?? [];\n      if (childIds.some(id => loading.get(id) !== 'LOADED')) {\n        return [];\n      }\n      return this._getDataByIds(childIds, data);\n    });\n  }\n\n  loadRoots() {\n    this._setRootsLoading();\n    this._backend.getRoots().subscribe(roots => {\n      this._setRoots(roots);\n    });\n  }\n\n  loadChildren(parentId: string) {\n    this._setChildrenLoading(parentId);\n    this._backend.getChildren(parentId).subscribe(children => {\n      this._addLoadedData(parentId, children);\n    });\n  }\n\n  private _setRootsLoading() {\n    this._state.next({\n      ...this._state.value,\n      rootsLoading: 'LOADING',\n    });\n  }\n\n  private _setRoots(roots: BackendData[]) {\n    const currentState = this._state.value;\n\n    this._state.next({\n      ...currentState,\n      rootIds: roots.map(root => root.id),\n      rootsLoading: 'LOADED',\n      ...this._addData(currentState, roots),\n    });\n  }\n\n  private _setChildrenLoading(parentId: string) {\n    const currentState = this._state.value;\n    const parentData = currentState.allData.get(parentId);\n\n    this._state.next({\n      ...currentState,\n      allData: new Map([\n        ...currentState.allData,\n        ...(parentData ? ([[parentId, {...parentData, childrenLoading: 'LOADING'}]] as const) : []),\n      ]),\n      dataLoading: new Map([\n        ...currentState.dataLoading,\n        ...(parentData?.childrenIds?.map(childId => [childId, 'LOADING'] as const) ?? []),\n      ]),\n    });\n  }\n\n  private _addLoadedData(parentId: string, childData: BackendData[]) {\n    const currentState = this._state.value;\n\n    this._state.next({\n      ...currentState,\n      ...this._addData(currentState, childData, parentId),\n    });\n  }\n\n  private _addData(\n    {allData, dataLoading}: State,\n    data: BackendData[],\n    parentId?: string,\n  ): Pick<State, 'allData' | 'dataLoading'> {\n    const parentData = parentId && allData.get(parentId);\n    const allChildren = data.flatMap(datum => datum.children ?? []);\n    return {\n      allData: new Map([\n        ...allData,\n        ...data.map(datum => {\n          return [\n            datum.id,\n            {\n              id: datum.id,\n              name: datum.name,\n              parentId,\n              childrenIds: datum.children,\n              childrenLoading: 'INIT',\n            },\n          ] as const;\n        }),\n        ...(parentData ? ([[parentId, {...parentData, childrenLoading: 'LOADED'}]] as const) : []),\n      ]),\n      dataLoading: new Map([\n        ...dataLoading,\n        ...data.map(datum => [datum.id, 'LOADED'] as const),\n        ...allChildren.map(childId => [childId, 'INIT'] as const),\n      ]),\n    };\n  }\n\n  private _getDataByIds(ids: string[], data: State['allData']) {\n    return ids\n      .map(id => data.get(id))\n      .filter(<T>(item: T | undefined): item is T => !!item)\n      .map(datum => new TransformedData(datum));\n  }\n\n  select<T extends readonly Observable<unknown>[], U>(\n    ...sourcesAndTransform: [...T, TransformFn<T, U>]\n  ) {\n    const sources = sourcesAndTransform.slice(0, -1) as unknown as T;\n    const transformFn = sourcesAndTransform[sourcesAndTransform.length - 1] as TransformFn<T, U>;\n\n    return combineLatest([...sources, this._state]).pipe(\n      map(args => transformFn(...(args as unknown as [...ObservedValuesOf<T>, State]))),\n      shareReplay({refCount: true, bufferSize: 1}),\n    );\n  }\n}\n\n/**\n * @title Complex example making use of the redux pattern.\n */\n@Component({\n  selector: 'cdk-tree-complex-example',\n  templateUrl: 'cdk-tree-complex-example.html',\n  styleUrls: ['cdk-tree-complex-example.css'],\n  imports: [CdkTreeModule, MatButtonModule, MatIconModule, MatProgressSpinnerModule, AsyncPipe],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkTreeComplexExample implements OnInit {\n  private readonly _dataStore = new ComplexDataStore();\n\n  areRootsLoading = this._dataStore.areRootsLoading;\n  roots = this._dataStore.roots;\n\n  getChildren = (node: TransformedData) => this._dataStore.getChildren(node.raw.id);\n  trackBy = (index: number, node: TransformedData) => this.expansionKey(node);\n  expansionKey = (node: TransformedData) => node.raw.id;\n\n  ngOnInit() {\n    this._dataStore.loadRoots();\n  }\n\n  onExpand(node: TransformedData, expanded: boolean) {\n    if (expanded) {\n      // Only perform a load on expansion.\n      this._dataStore.loadChildren(node.raw.id);\n    }\n  }\n}\n\nconst EXAMPLE_DATA = new Map<string, BackendData>(\n  [\n    {\n      id: '1',\n      name: 'Fruit',\n      children: ['1-1', '1-2', '1-3'],\n    },\n    {id: '1-1', name: 'Apple', parent: '1'},\n    {id: '1-2', name: 'Banana', parent: '1'},\n    {id: '1-3', name: 'Fruit Loops', parent: '1'},\n    {\n      id: '2',\n      name: 'Vegetables',\n      children: ['2-1', '2-2'],\n    },\n    {\n      id: '2-1',\n      name: 'Green',\n      parent: '2',\n      children: ['2-1-1', '2-1-2'],\n    },\n    {\n      id: '2-2',\n      name: 'Orange',\n      parent: '2',\n      children: ['2-2-1', '2-2-2'],\n    },\n    {id: '2-1-1', name: 'Broccoli', parent: '2-1'},\n    {id: '2-1-2', name: 'Brussel sprouts', parent: '2-1'},\n    {id: '2-2-1', name: 'Pumpkins', parent: '2-2'},\n    {id: '2-2-2', name: 'Carrots', parent: '2-2'},\n  ].map(datum => [datum.id, datum]),\n);\n","import {ChangeDetectionStrategy, Component, QueryList} from '@angular/core';\nimport {ArrayDataSource} from '@angular/cdk/collections';\nimport {coerceObservable} from '@angular/cdk/coercion/private';\nimport {FlatTreeControl, CdkTreeModule} from '@angular/cdk/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {\n  TREE_KEY_MANAGER,\n  TreeKeyManagerFactory,\n  TreeKeyManagerItem,\n  TreeKeyManagerStrategy,\n} from '@angular/cdk/a11y';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  H,\n  HOME,\n  J,\n  K,\n  L,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  TAB,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {Subject, isObservable, Observable} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n/** Flat node with expandable and level information */\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n  isExpanded?: boolean;\n}\n\n/**\n * This class manages keyboard events for trees. If you pass it a QueryList or other list of tree\n * items, it will set the active item, focus, handle expansion and typeahead correctly when\n * keyboard events occur.\n */\nexport class VimTreeKeyManager<T extends TreeKeyManagerItem> implements TreeKeyManagerStrategy<T> {\n  private _activeItemIndex = -1;\n  private _activeItem: T | null = null;\n\n  private _items: T[] = [];\n\n  private _hasInitialFocused = false;\n\n  private _initialFocus() {\n    if (this._hasInitialFocused) {\n      return;\n    }\n\n    if (!this._items.length) {\n      return;\n    }\n\n    this._focusFirstItem();\n\n    this._hasInitialFocused = true;\n  }\n\n  // TreeKeyManagerOptions not implemented.\n  constructor(items: Observable<T[]> | QueryList<T> | T[]) {\n    // We allow for the items to be an array or Observable because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (items instanceof QueryList) {\n      this._items = items.toArray();\n      items.changes.subscribe((newItems: QueryList<T>) => {\n        this._items = newItems.toArray();\n        this._updateActiveItemIndex(this._items);\n        this._initialFocus();\n      });\n    } else if (isObservable(items)) {\n      items.subscribe(newItems => {\n        this._items = newItems;\n        this._updateActiveItemIndex(newItems);\n        this._initialFocus();\n      });\n    } else {\n      this._items = items;\n      this._initialFocus();\n    }\n  }\n\n  destroy() {\n    this.change.complete();\n  }\n\n  /** Stream that emits any time the focused item changes. */\n  readonly change = new Subject<T | null>();\n\n  /**\n   * Handles a keyboard event on the tree.\n   * @param event Keyboard event that represents the user interaction with the tree.\n   */\n  onKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case TAB:\n        // Return early here, in order to allow Tab to actually tab out of the tree\n        return;\n\n      case DOWN_ARROW:\n      case J:\n        this._focusNextItem();\n        break;\n\n      case UP_ARROW:\n      case K:\n        this._focusPreviousItem();\n        break;\n\n      case RIGHT_ARROW:\n      case L:\n        this._expandCurrentItem();\n        break;\n\n      case LEFT_ARROW:\n      case H:\n        this._collapseCurrentItem();\n        break;\n\n      case HOME:\n        this._focusFirstItem();\n        break;\n\n      case END:\n        this._focusLastItem();\n        break;\n\n      case ENTER:\n      case SPACE:\n        this._activateCurrentItem();\n        break;\n    }\n  }\n\n  /** Index of the currently active item. */\n  getActiveItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n\n  /** The currently active item. */\n  getActiveItem(): T | null {\n    return this._activeItem;\n  }\n\n  /**\n   * Focus the provided item by index.\n   * @param index The index of the item to focus.\n   * @param options Additional focusing options.\n   */\n  focusItem(index: number, options?: {emitChangeEvent?: boolean}): void;\n  /**\n   * Focus the provided item.\n   * @param item The item to focus. Equality is determined via the trackBy function.\n   * @param options Additional focusing options.\n   */\n  focusItem(item: T, options?: {emitChangeEvent?: boolean}): void;\n  focusItem(itemOrIndex: number | T, options?: {emitChangeEvent?: boolean}): void;\n  focusItem(itemOrIndex: number | T, options: {emitChangeEvent?: boolean} = {}) {\n    // Set default options\n    options.emitChangeEvent ??= true;\n\n    let index =\n      typeof itemOrIndex === 'number'\n        ? itemOrIndex\n        : this._items.findIndex(item => item === itemOrIndex);\n    if (index < 0 || index >= this._items.length) {\n      return;\n    }\n    const activeItem = this._items[index];\n\n    // If we're just setting the same item, don't re-call activate or focus\n    if (this._activeItem !== null && activeItem === this._activeItem) {\n      return;\n    }\n\n    this._activeItem = activeItem ?? null;\n    this._activeItemIndex = index;\n\n    if (options.emitChangeEvent) {\n      // Emit to `change` stream as required by TreeKeyManagerStrategy interface.\n      this.change.next(this._activeItem);\n    }\n    this._activeItem?.focus();\n    this._activateCurrentItem();\n  }\n\n  private _updateActiveItemIndex(newItems: T[]) {\n    const activeItem = this._activeItem;\n    if (activeItem) {\n      const newIndex = newItems.findIndex(item => item === activeItem);\n\n      if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n        this._activeItemIndex = newIndex;\n      }\n    }\n  }\n\n  /** Focus the first available item. */\n  private _focusFirstItem(): void {\n    this.focusItem(this._findNextAvailableItemIndex(-1));\n  }\n\n  /** Focus the last available item. */\n  private _focusLastItem(): void {\n    this.focusItem(this._findPreviousAvailableItemIndex(this._items.length));\n  }\n\n  /** Focus the next available item. */\n  private _focusNextItem(): void {\n    this.focusItem(this._findNextAvailableItemIndex(this._activeItemIndex));\n  }\n\n  /** Focus the previous available item. */\n  private _focusPreviousItem(): void {\n    this.focusItem(this._findPreviousAvailableItemIndex(this._activeItemIndex));\n  }\n\n  //// Navigational methods\n  private _findNextAvailableItemIndex(startingIndex: number) {\n    if (startingIndex + 1 < this._items.length) {\n      return startingIndex + 1;\n    }\n    return startingIndex;\n  }\n\n  private _findPreviousAvailableItemIndex(startingIndex: number) {\n    if (startingIndex - 1 >= 0) {\n      return startingIndex - 1;\n    }\n    return startingIndex;\n  }\n\n  /**\n   * If the item is already expanded, we collapse the item. Otherwise, we will focus the parent.\n   */\n  private _collapseCurrentItem() {\n    if (!this._activeItem) {\n      return;\n    }\n\n    if (this._isCurrentItemExpanded()) {\n      this._activeItem.collapse();\n    } else {\n      const parent = this._activeItem.getParent();\n      if (!parent) {\n        return;\n      }\n      this.focusItem(parent as T);\n    }\n  }\n\n  /**\n   * If the item is already collapsed, we expand the item. Otherwise, we will focus the first child.\n   */\n  private _expandCurrentItem() {\n    if (!this._activeItem) {\n      return;\n    }\n\n    if (!this._isCurrentItemExpanded()) {\n      this._activeItem.expand();\n    } else {\n      coerceObservable(this._activeItem.getChildren())\n        .pipe(take(1))\n        .subscribe(children => {\n          const firstChild = children[0];\n          if (!firstChild) {\n            return;\n          }\n          this.focusItem(firstChild as T);\n        });\n    }\n  }\n\n  private _isCurrentItemExpanded() {\n    if (!this._activeItem) {\n      return false;\n    }\n    return typeof this._activeItem.isExpanded === 'boolean'\n      ? this._activeItem.isExpanded\n      : this._activeItem.isExpanded();\n  }\n\n  private _activateCurrentItem() {\n    this._activeItem?.activate();\n  }\n}\n\nfunction VimTreeKeyManagerFactory<T extends TreeKeyManagerItem>(): TreeKeyManagerFactory<T> {\n  return items => new VimTreeKeyManager(items);\n}\n\nconst VIM_TREE_KEY_MANAGER_PROVIDER = {\n  provide: TREE_KEY_MANAGER,\n  useFactory: VimTreeKeyManagerFactory,\n};\n\n/**\n * @title Tree with vim keyboard commands.\n */\n@Component({\n  selector: 'cdk-tree-custom-key-manager-example',\n  templateUrl: 'cdk-tree-custom-key-manager-example.html',\n  styleUrls: ['cdk-tree-custom-key-manager-example.css'],\n  imports: [CdkTreeModule, MatButtonModule, MatIconModule],\n  providers: [VIM_TREE_KEY_MANAGER_PROVIDER],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkTreeCustomKeyManagerExample {\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    node => node.level,\n    node => node.expandable,\n  );\n\n  dataSource = new ArrayDataSource(EXAMPLE_DATA);\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n\n  getParentNode(node: ExampleFlatNode) {\n    const nodeIndex = EXAMPLE_DATA.indexOf(node);\n\n    for (let i = nodeIndex - 1; i >= 0; i--) {\n      if (EXAMPLE_DATA[i].level === node.level - 1) {\n        return EXAMPLE_DATA[i];\n      }\n    }\n\n    return null;\n  }\n\n  shouldRender(node: ExampleFlatNode) {\n    let parent = this.getParentNode(node);\n    while (parent) {\n      if (!parent.isExpanded) {\n        return false;\n      }\n      parent = this.getParentNode(parent);\n    }\n    return true;\n  }\n}\n\nconst EXAMPLE_DATA: ExampleFlatNode[] = [\n  {\n    name: 'Fruit',\n    expandable: true,\n    level: 0,\n  },\n  {\n    name: 'Apple',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Banana',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Fruit loops',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Vegetables',\n    expandable: true,\n    level: 0,\n  },\n  {\n    name: 'Green',\n    expandable: true,\n    level: 1,\n  },\n  {\n    name: 'Broccoli',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Brussels sprouts',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Orange',\n    expandable: true,\n    level: 1,\n  },\n  {\n    name: 'Pumpkins',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Carrots',\n    expandable: false,\n    level: 2,\n  },\n];\n"],"names":["flattenNodes","nodes","flattenedNodes","push","node","children","CdkTreeFlatChildrenAccessorExample","dataNode","timer","pipe","mapTo","ArrayDataSource","EXAMPLE_DATA","hasChild","_","length","shouldRender","parent","getParentNode","tree","isExpanded","deps","target","i0","ɵɵFactoryTarget","Component","isStandalone","selector","viewQueries","propertyName","first","predicate","CdkTree","descendants","ngImport","template","CdkTreeModule","kind","type","i1","CdkTreeNodeDef","inputs","CdkTreeNodePadding","CdkTreeNodeToggle","exportAs","CdkTreeNode","outputs","MatButtonModule","i2","MatIconButton","MatIconModule","i3","MatIcon","changeDetection","ChangeDetectionStrategy","OnPush","decorators","imports","styles","name","CdkTreeFlatLevelAccessorExample","levelAccessor","level","expandable","i","CdkTreeFlatExample","treeControl","FlatTreeControl","CdkTreeNestedLevelAccessorExample","CdkNestedTreeNode","CdkTreeNodeOutlet","CdkTreeNestedChildrenAccessorExample","includes","NestedTreeControl","dataSource","FakeDataBackend","_getRandomDelayTime","Math","floor","random","getChildren","id","item","get","observableOf","map","childId","delay","getRoots","values","filter","datum","raw","areChildrenLoading","childrenLoading","isExpandable","childrenIds","isLeaf","ComplexDataStore","_backend","_state","BehaviorSubject","rootIds","rootsLoading","allData","Map","dataLoading","select","state","_allData","_loadingData","_rootsLoadingState","areRootsLoading","_rootIds","loading","roots","_getDataByIds","parentId","data","parentData","childIds","some","_setRootsLoading","subscribe","loadChildren","_setChildrenLoading","_addLoadedData","next","value","_setRoots","currentState","root","_addData","childData","allChildren","flatMap","VimTreeKeyManager","_activeItem","_items","_hasInitialFocused","_initialFocus","_focusFirstItem","items","QueryList","toArray","newItems","_updateActiveItemIndex","change","complete","Subject","onKeydown","event","keyCode","TAB","DOWN_ARROW","J","_focusNextItem","UP_ARROW","K","_focusPreviousItem","RIGHT_ARROW","L","_expandCurrentItem","LEFT_ARROW","H","_collapseCurrentItem","END","_focusLastItem","ENTER","_activateCurrentItem","getActiveItemIndex","_activeItemIndex","getActiveItem","focusItem","itemOrIndex","options","emitChangeEvent","index","findIndex","activeItem","focus","newIndex","_findNextAvailableItemIndex","_findPreviousAvailableItemIndex","startingIndex","_isCurrentItemExpanded","collapse","expand","coerceObservable","firstChild","activate","VimTreeKeyManagerFactory","VIM_TREE_KEY_MANAGER_PROVIDER","provide","TREE_KEY_MANAGER","useFactory","CdkTreeCustomKeyManagerExample","providers"],"mappings":";;;;;;;;;;;;;;;;;;SAuBKA,cAAAA,CAAAC,KAAA,EAAA;QACFC,cAAA,GAAA,EAAA;AACD,EAAA,KAAA,mBAAsB,EAAA;AACvBA,IAAAA,cAAA,CAAAC,IAAA,CAAAC,IAAA,CAAA;IAED,IAAAA,IAAA,CAAAC,QAAA,EAAA;;AAEG;AAQH;AAEE,EAAA,OAA+BH,cAAA;;MAmBzBI,kCAAkC,CAAA;;kBAInC,GAAAC,QAAA,IAAAC,KAAA,CAAA,GAAA,CAAA,CAAAC,IAAA,CAAAC,KAAA,CAAAH,QAAA,CAAAF,QAAA,IAAA,EAAA,CAAA,CAAA;YAEF,GAAA,IAAAM,eAAA,CAAAC,cAAA,CAAA;UAEF,GAAAC,CAAAC,CAAA,EAAAV,IAAA,KAAA,CAAA,CAAAA,IAAA,CAAAC,QAAA,EAAAU,MAAA;;;;qBApCO;;;;;AAwCRC,EAAAA,YAAAA,CAAAZ,IAAA,EAAA;AACE,IAAA,IAAAa,MAAM,GAAO,IAAA,CAAAC,aAAA,CAAAd,IAAA,CAAA;AACb,IAAA,OAAAa,QAAW;MACZ,IAAA,CAAA,IAAA,CAAAE,IAAA,CAAAC,UAAA,CAAAH,MAAA,CAAA,EAAA;AACD,QAAA,OAAA,KAAA;AACE;AACAA,MAAAA,MAAA,GAAA,IAAU,CAAAC,aAAA,CAAAD,MAAA,CAAA;AACR;AACE,IAAA,OAAA,IAAA;AACA;;;;;UArBAX,kCAAkC;IAAAe,IAAA,EAAA,EAAA;AAAAC,IAAAA,MAAA,EAAAC,EAAA,CAAAC,eAAA,CAAAC;AAAA,GAAA,CAAA;;;;UAAlCnB,kCAAkC;IAAAoB,YAAA,EAAA,IAAA;IAAAC,QAAA,EAAA,yCAAA;IAAAC,WAAA,EAAA,CAAA;MAAAC,YAAA,EAAA,MAAA;MAAAC,KAAA,EAAA,IAAA;AAAAC,MAAAA,SAAA,EAC/BC,OAAA;MAAAC,WAAA,EAAA;AAAA,KAAA,CAAA;AAAAC,IAAAA,QAAA,EAAAX,EAAA;AAAAY,IAAAA,QAAA;;;;YALPC;AAAY,KAAA,EAAA;MAAAC,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAC,cAAA;MAAAb,QAAA,EAAA,kBAAA;MAAAc,MAAA,EAAA,CAAA,oBAAA;AAAA,KAAA,EAAA;MAAAJ,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAG,kBAAA;MAAAf,QAAA,EAAA,sBAAA;MAAAc,MAAA,EAAA,CAAA,oBAAA,EAAA,0BAAA;AAAA,KAAA,EAAA;MAAAJ,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAI,iBAAA;MAAAhB,QAAA,EAAA,qBAAA;MAAAc,MAAA,EAAA,CAAA,4BAAA;AAAA,KAAA,EAAA;MAAAJ,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAP,OAAA;MAAAL,QAAA,EAAA,UAAA;MAAAc,MAAA,EAAA,CAAA,YAAA,EAAA,aAAA,EAAA,eAAA,EAAA,kBAAA,EAAA,SAAA,EAAA,cAAA,CAAA;MAAAG,QAAA,EAAA,CAAA,SAAA;AAAA,KAAA,EAAA;MAAAP,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAM,WAAA;MAAAlB,QAAA,EAAA,eAAA;MAAAc,MAAA,EAAA,CAAA,MAAA,EAAA,cAAA,EAAA,YAAA,EAAA,YAAA,EAAA,2BAAA,CAAA;MAAAK,OAAA,EAAA,CAAA,YAAA,EAAA,gBAAA,CAAA;MAAAF,QAAA,EAAA,CAAA,aAAA;AAAA,KAAA,EAAA;MAAAP,IAAA,EAAA,UAAA;AAAAC,MAAAA,IAAA,EAAAS;AAAA,KAAA,EAAA;MAAAV,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAU,IAAA,CAAAC,aAAA;MAAAtB,QAAA,EAAA,sFAAA;MAAAiB,QAAA,EAAA,CAAA,WAAA,EAAA,WAAA;AAAA,KAAA,EAAA;MAAAP,IAAA,EAAA,UAAA;AAAAC,MAAAA,IAAA,EAAAY;AAAA,KAAA,EAAA;MAAAb,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAa,EAAA,CAAAC,OAAA;MAAAzB,QAAA,EAAA,UAAA;MAAAc,MAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,UAAA,CAAA;MAAAG,QAAA,EAAA,CAAA,SAAA;AAAA,KAAA,CAAA;AAAAS,IAAAA,eAAA,EAAA9B,EAAA,CAAA+B,uBAAA,CAAAC;AAAA,GAAA,CAAA;;;;;;QAIRjD,kCAAkC;EAAAkD,UAAA,EAAA,CAAA;;;gBARlC,yCAAc;AAAAC,MAAAA,OAAA,EAIlB,CAAArB,aAAY,EAAAW,eAAA,EAAAG,aAAA,CAAA;MAAAG,eAAA,EACbC,uBAAA,CAAAC,MAAA;MAAApB,QAAA,EAAA,ixCAAA;MAAAuB,MAAA,EAAA,CAAA,qEAAA;AAAA,KAAA;;;;qBAIQ;aAAA1B,OAAA;;;;AAuBH,MAAApB,cAAA,GAAc,CACd;AACD+C,EAAAA,IAAA,EAAA,OAAA;AACFtD,EAAAA,QAAA,EAAA,CAAA;AAAAsD,IAAAA,IAAA,EAAA;AAAA,GAAA,EAAA;AAAAA,IAAAA,IAAA,EAAA;AAAA,GAAA,EAAA;AAAAA,IAAAA,IAAA,EAAA;GAAA;CACF,EACD;;;;;;;;;;;;;;;;;;;MC9CKC,+BAAA,CAAA;EAGHzC,IAAA;AAGF0C,EAAAA,aAAA,GAA+BtD,QAAA,IAAAA,QAAA,CAAAuD,KAAA;YAEvB,GAAA,IAAAnD,8BAAiC,CAAC;UAEzC,GAAAE,CAAAC,CAAA,EAAAV,IAAA,KAAAA,IAAA,CAAA2D,UAAA;;;8BA1BD,EAAIC,CAAA,IAAA,CAAA,EAAAA,CAAA,EAAA,EAAA;wBADH,CAASA,CAAA,CAAA,CAAAF,KAAA,KAAA1D,IAAA,CAAA0D,KAAA,GAAA,CAAA,EAAA;6BAAQ,CAAAE,CAAA,CAAA;;AA8BpB;AAEI,IAAA,OAAA,IAAa;AACb;AAEDhD,EAAAA,YAAAA,CAAAZ,IAAA,EAAA;AAEC,IAAA,MAAAa,MAAa,GAAA,IAAA,CAAAC,aAAA,CAAAd,IAAA,CAAA;AACb,IAAA,OAAA,CAAAa,MAAU,IAAO,CAAA,CAAA,IAAA,CAAAE,IAAA,EAAAC,UAAA,CAAAH,MAAA,CAAA,IAAA,IAAA,CAAAD,YAAA,CAAAC,MAAA,CAAA;AACjB;;;;;UAtBG2C,+BAAA;IAAAvC,IAAA,EAAA,EAAA;AAAAC,IAAAA,MAAA,EAAAC,EAAA,CAAAC,eAAA,CAAAC;AAAA,GAAA,CAAA;;;;UAAAmC,+BAAA;IAAAlC,YAAA,EAAA,IAAA;IAAAC,QAAA,EAAA,sCAAA;IAAAC,WAAA,EAAA,CAAA;MAAAC,YAAA,EAAA,MAAA;MAAAC,KAAA,EAAA,IAAA;AAAAC,MAAAA,SAAA,EACFC,OAAA;MAAAC,WAAA,EAAA;AAAA,KAAA,CAAA;AAAAC,IAAAA,QAAA,EAAAX,EAAA;AAAAY,IAAAA,QAAA;;;;YAJDC;AAAa,KAAA,EAAA;MAAAC,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAC,cAAA;MAAAb,QAAA,EAAA,kBAAA;MAAAc,MAAA,EAAA,CAAA,oBAAA;AAAA,KAAA,EAAA;MAAAJ,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAG,kBAAA;MAAAf,QAAA,EAAA,sBAAA;MAAAc,MAAA,EAAA,CAAA,oBAAA,EAAA,0BAAA;AAAA,KAAA,EAAA;MAAAJ,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAI,iBAAA;MAAAhB,QAAA,EAAA,qBAAA;MAAAc,MAAA,EAAA,CAAA,4BAAA;AAAA,KAAA,EAAA;MAAAJ,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAP,OAAA;MAAAL,QAAA,EAAA,UAAA;MAAAc,MAAA,EAAA,CAAA,YAAA,EAAA,aAAA,EAAA,eAAA,EAAA,kBAAA,EAAA,SAAA,EAAA,cAAA,CAAA;MAAAG,QAAA,EAAA,CAAA,SAAA;AAAA,KAAA,EAAA;MAAAP,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAM,WAAA;MAAAlB,QAAA,EAAA,eAAA;MAAAc,MAAA,EAAA,CAAA,MAAA,EAAA,cAAA,EAAA,YAAA,EAAA,YAAA,EAAA,2BAAA,CAAA;MAAAK,OAAA,EAAA,CAAA,YAAA,EAAA,gBAAA,CAAA;MAAAF,QAAA,EAAA,CAAA,aAAA;AAAA,KAAA,EAAA;MAAAP,IAAA,EAAA,UAAA;AAAAC,MAAAA,IAAA,EAAAS;AAAqB,KAAA,EAAA;MAAAV,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAU,IAAA,CAAAC,aAAA;MAAAtB,QAAA,EAAA,sFAAA;MAAAiB,QAAA,EAAA,CAAA,WAAA,EAAA,WAAA;AAAA,KAAA,EAAA;MAAAP,IAAA,EAAA,UAAA;AAAAC,MAAAA,IAAA,EAAEY;AAAM,KAAA,EAAA;MAAAb,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAa,EAAA,CAAAC,OAAA;MAAAzB,QAAA,EAAA,UAAA;MAAAc,MAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,UAAA,CAAA;MAAAG,QAAA,EAAA,CAAA,SAAA;AAAA,KAAA,CAAA;AAAAS,IAAAA,eAAA,EAAA9B,EAAA,CAAA+B,uBAAA,CAAAC;AAAA,GAAA,CAAA;;;;;;QAGvCK,+BAAA;EAAAJ,UAAA,EAAA,CAAA;UARL/B,SAAA;;gBACQ,sCAAiC;AAAAgC,MAAAA,OAAA,EAIvC,CAAArB,aAAa,EAAAW,eAAqB,EAAEG,aAAM,CAAA;MAAAG,eAAA,EACxBC,uBAAc,CAAAC,MAAK;MAAApB,QAAA,EAAA,82CAAA;MAAAuB,MAAA,EAAA,CAAA,qEAAA;AAAA,KAAA;;;IAKrCvC,IAAA,EAAA,CAAA;qBAFC;aAAAa,OAAA;;;;AAwBD,MAAApB,cAAc,GAAA,CACd;AACA+C,EAAAA,IAAA,EAAA,OAAQ;AACTI,EAAAA,UAAA,EAAA,IAAA;AACDD,EAAAA,KAAA,EAAA;CACE,EACA;AACAH,EAAAA,IAAA,EAAA,OAAQ;AACTI,EAAAA,UAAA,EAAA,KAAA;AACDD,EAAAA,KAAA,EAAA;CACE,EACA;AACAH,EAAAA,IAAA,EAAA,QAAQ;AACTI,EAAAA,UAAA,EAAA,KAAA;AACDD,EAAAA,KAAA,EAAA;CACE,EACA;AACAH,EAAAA,IAAA,EAAA,aAAQ;AACTI,EAAAA,UAAA,EAAA,KAAA;AACDD,EAAAA,KAAA,EAAA;CACE,EACA;AACAH,EAAAA,IAAA,EAAA,YAAQ;AACTI,EAAAA,UAAA,EAAA,IAAA;AACDD,EAAAA,KAAA,EAAA;CACE,EACA;AACAH,EAAAA,IAAA,EAAA,OAAQ;AACTI,EAAAA,UAAA,EAAA,IAAA;AACDD,EAAAA,KAAA,EAAA;CACE,EACA;AACAH,EAAAA,IAAA,EAAA,UAAQ;AACTI,EAAAA,UAAA,EAAA,KAAA;AACDD,EAAAA,KAAA,EAAA;CACE,EACA;AACAH,EAAAA,IAAA,EAAA,kBAAQ;AACTI,EAAAA,UAAA,EAAA,KAAA;AACDD,EAAAA,KAAA,EAAA;CACE,EACA;AACAH,EAAAA,IAAA,EAAA,QAAQ;AACTI,EAAAA,UAAA,EAAA,IAAA;AACDD,EAAAA,KAAA,EAAA;;;;;;;;;;;ACnEC,MAAAG,kBAAA,CAAA;AAEDC,EAAAA,WAAA,GAAY,IAAsBC,eAAA,KAChC,IAAI/D,IAAA,CAAA0D,KAAa,MACjB,IAAO1D,IAAA,CAAA2D,UAAS,CACd;YAEA,GAAC,IAAApD,eAAA,CAAAC,cAAA,CAAA;UAEF,GAAAC,CAAAC,CAAA,EAAAV,IAAA,KAAAA,IAAA,CAAA2D,UAAA;eAEF7C,CAAAd,IAAA,EAAA;;;;6BAtCO,CAAA4D,CAAA,CAAA;;;AA0CR,IAAA,OAAA,IAAA;AACE;AAEAhD,EAAAA,aAAOZ,IAAC,EAAA;AACT,IAAA,IAAAa,MAAA,GAAA,IAAA,CAAAC,aAAA,CAAAd,IAAA,CAAA;AACD,IAAA,OAAAa,MAAA,EAAA;AACE,MAAA,IAAA,CAAAA,MAAa,CAAAG,UAAA,EAAA;AACb,QAAA,OAAA,KAAY;AACZ;AACDH,MAAAA,MAAA,GAAA,IAAA,CAAAC,aAAA,CAAAD,MAAA,CAAA;AACD;AACE,IAAA,OAAA,IAAc;AACd;;;;;UA3BDgD,kBAAA;IAAA5C,IAAA,EAAA,EAAA;AAAAC,IAAAA,MAAA,EAAAC,EAAA,CAAAC,eAAA,CAAAC;AAAA,GAAA,CAAA;;;;UAAAwC,kBAAA;IAAAvC,YAAA,EAAA,IAAA;IAAAC,QAAA,EAAA,uBAAA;AAAAO,IAAAA,QAAA,EAAAX,EAAA;AAAAY,IAAAA,QAAA;;;;YAJGC;AAAC,KAAA,EAAA;MAAAC,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAC,cAAA;MAAAb,QAAA,EAAA,kBAAA;MAAAc,MAAA,EAAA,CAAA,oBAAA;AAAA,KAAA,EAAA;MAAAJ,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAG,kBAAA;MAAAf,QAAA,EAAA,sBAAA;MAAAc,MAAA,EAAA,CAAA,oBAAA,EAAA,0BAAA;AAAA,KAAA,EAAA;MAAAJ,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAI,iBAAA;MAAAhB,QAAA,EAAA,qBAAA;MAAAc,MAAA,EAAA,CAAA,4BAAA;AAAA,KAAA,EAAA;MAAAJ,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAP,OAAA;MAAAL,QAAA,EAAA,UAAA;MAAAc,MAAA,EAAA,CAAA,YAAA,EAAA,aAAA,EAAA,eAAA,EAAA,kBAAA,EAAA,SAAA,EAAA,cAAA,CAAA;MAAAG,QAAA,EAAA,CAAA,SAAA;AAAA,KAAA,EAAA;MAAAP,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAM,WAAA;MAAAlB,QAAA,EAAA,eAAA;MAAAc,MAAA,EAAA,CAAA,MAAA,EAAA,cAAA,EAAA,YAAA,EAAA,YAAA,EAAA,2BAAA,CAAA;MAAAK,OAAA,EAAA,CAAA,YAAA,EAAA,gBAAA,CAAA;MAAAF,QAAA,EAAA,CAAA,aAAA;AAAA,KAAA,EAAA;MAAAP,IAAA,EAAA,UAAA;AAAAC,MAAAA,IAAA,EAAAS;AAAA,KAAA,EAAA;MAAAV,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAU,IAAA,CAAAC,aAAA;MAAAtB,QAAA,EAAA,sFAAA;MAAAiB,QAAA,EAAA,CAAA,WAAA,EAAA,WAAA;AAAA,KAAA,EAAA;MAAAP,IAAA,EAAA,UAAA;AAAAC,MAAAA,IAAA,EAAAY;AAAA,KAAA,EAAA;MAAAb,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAa,EAAA,CAAAC,OAAA;MAAAzB,QAAA,EAAA,UAAA;MAAAc,MAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,UAAA,CAAA;MAAAG,QAAA,EAAA,CAAA,SAAA;AAAA,KAAA,CAAA;AAAAS,IAAAA,eAAA,EAAA9B,EAAA,CAAA+B,uBAAA,CAAAC;AAAA,GAAA,CAAA;;;;;;QAIJU,kBAAA;EAAAT,UAAA,EAAA,CAAA;mBATO;;gBAEN,uBAA0B;AAAAC,MAAAA,OAAA,GAGxBrB,aAAC,EAAAW,eAAA,EAAAG,aAAA,CAAA;MAAAG,eAAA,EACFC,uBAAA,CAAAC,MAAA;MAAApB,QAAA,EAAA,o2CAAA;MAAAuB,MAAA,EAAA,CAAA,qEAAA;AAAA,KAAA;;;AAiCH,MAAA9C,cAAA,GAAA,CACE;AACA+C,EAAAA,IAAA,EAAA,OAAA;AACAI,EAAAA,YAAQ,IAAA;AACTD,EAAAA,KAAA,EAAA;CACD,EACE;AACAH,EAAAA,IAAA,EAAA,OAAA;AACAI,EAAAA,YAAQ,KAAA;AACTD,EAAAA,KAAA,EAAA;CACD,EACE;AACAH,EAAAA,IAAA,EAAA,QAAU;AACVI,EAAAA,YAAQ,KAAA;AACTD,EAAAA,KAAA,EAAA;CACD,EACE;AACAH,EAAAA,IAAA,EAAA,aAAiB;AACjBI,EAAAA,YAAQ,KAAA;AACTD,EAAAA,KAAA,EAAA;CACD,EACE;AACAH,EAAAA,IAAA,EAAA,YAAiB;AACjBI,EAAAA,YAAQ,IAAA;AACTD,EAAAA,KAAA,EAAA;CACD,EACE;AACAH,EAAAA,IAAA,EAAA,OAAA;AACAI,EAAAA,YAAQ,IAAA;AACTD,EAAAA,KAAA,EAAA;CACD,EACE;AACAH,EAAAA,IAAA,EAAA,UAAY;AACZI,EAAAA,YAAQ,KAAA;AACTD,EAAAA,KAAA,EAAA;CACD,EACE;AACAH,EAAAA,IAAA,EAAA,kBAAiB;AACjBI,EAAAA,YAAQ,KAAA;AACTD,EAAAA,KAAA,EAAA;CACD;;;;;;;;;;;;;;MCzEKM,iCAAA,CAAA;EACFjD,IAAA;eAGF,GAAAZ,QAAA,IAAAA,QAAA,CAAAuD,KAAA;YAGyF,GAAA,IAAAnD,eAAA,CAAAC,cAAA,CAAA;UAEjF,GAAAC,CAAAC,CAAW,EAAAV,IAAc,KAAAA,IAAiB,CAAA2D,UAAS;;;gCAhCVC,CAAA,IAAA,CAAA,EAAAA,CAAA,EAAA,EAAA;iCAO1B,KAAA5D,IAAA,CAAA0D,KAAA,GAAA,CAAA,EAAA;6BAAd,CAAAE,CAAA,CAAA;;;AA8BV,IAAA,OAAA,IAAA;AACE;AAEAhD,EAAAA,aAAOZ,IAAC,EAAA;AAEV,IAAA,MAAAa,MAAA,GAAA,IAAA,CAAAC,aAAA,CAAAd,IAAA,CAAA;AACE,IAAA,OAAA,CAAIa,MAAS,IAAA,CAAA,CAAA,IAAA,CAAAE,IAAA,EAAAC,UAAA,CAAAH,MAAA,CAAA,IAAA,IAAA,CAAAD,YAAA,CAAAC,MAAA,CAAA;AACb;;;;;UArBGmD,iCAAA;IAAA/C,IAAA,EAAA,EAAA;AAAAC,IAAAA,MAAA,EAAAC,EAAA,CAAAC,eAAA,CAAAC;AAAA,GAAA,CAAA;;;;UAAA2C,iCAAA;IAAA1C,YAAA,EAAA,IAAA;IAAAC,QAAA,EAAA,wCAAA;IAAAC,WAAA,EAAA,CAAA;MAAAC,YAAA,EAAA,MAAA;MAAAC,KAAA,EAAA,IAAA;AAAAC,MAAAA,SAAA,EACFC,OAAA;MAAAC,WAAA,EAAA;AAAA,KAAA,CAAA;AAAAC,IAAAA,QAAA,EAAAX,EAAA;AAAAY,IAAAA,QAAA;;;;YAJDC;AAAa,KAAA,EAAA;MAAAC,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAA8B,iBAAA;MAAA1C,QAAA,EAAA,sBAAA;MAAAiB,QAAA,EAAA,CAAA,mBAAA;AAAA,KAAA,EAAA;MAAAP,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAC,cAAA;MAAAb,QAAA,EAAA,kBAAA;MAAAc,MAAA,EAAA,CAAA,oBAAA;AAAA,KAAA,EAAA;MAAAJ,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAI,iBAAA;MAAAhB,QAAA,EAAA,qBAAA;MAAAc,MAAA,EAAA,CAAA,4BAAA;AAAA,KAAA,EAAA;MAAAJ,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAP,OAAA;MAAAL,QAAA,EAAA,UAAA;MAAAc,MAAA,EAAA,CAAA,YAAA,EAAA,aAAA,EAAA,eAAA,EAAA,kBAAA,EAAA,SAAA,EAAA,cAAA,CAAA;MAAAG,QAAA,EAAA,CAAA,SAAA;AAAA,KAAA,EAAA;MAAAP,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAA+B,iBAAA;MAAA3C,QAAA,EAAA;AAAA,KAAA,EAAA;MAAAU,IAAA,EAAA,UAAA;AAAAC,MAAAA,IAAA,EAAAS;AAAqB,KAAA,EAAA;MAAAV,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAU,IAAA,CAAAC,aAAA;MAAAtB,QAAA,EAAA,sFAAA;MAAAiB,QAAA,EAAA,CAAA,WAAA,EAAA,WAAA;AAAA,KAAA,EAAA;MAAAP,IAAA,EAAA,UAAA;AAAAC,MAAAA,IAAA,EAAEY;AAAM,KAAA,EAAA;MAAAb,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAa,EAAA,CAAAC,OAAA;MAAAzB,QAAA,EAAA,UAAA;MAAAc,MAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,UAAA,CAAA;MAAAG,QAAA,EAAA,CAAA,SAAA;AAAA,KAAA,CAAA;AAAAS,IAAAA,eAAA,EAAA9B,EAAA,CAAA+B,uBAAA,CAAAC;AAAA,GAAA,CAAA;;;;;;QAGvCa,iCAAA;EAAAZ,UAAA,EAAA,CAAA;UARL/B,SAAA;;gBACQ,wCAAsC;AAAAgC,MAAAA,OAAA,EAI5C,CAAArB,aAAa,EAAAW,eAAqB,EAAEG,aAAM,CAAA;MAAAG,eAAA,EACxBC,uBAAc,CAAAC,MAAK;MAAApB,QAAA,EAAA,mqCAAA;MAAAuB,MAAA,EAAA,CAAA,yVAAA;AAAA,KAAA;;;IAGpCvC,IAAA,EAAA,CAAA;qBAAA;aAAAa,OAAA;;;;AAuBH,MAAApB,cAAA,GAAA,CACE;AACA+C,EAAAA,IAAA,EAAA,OAAA;AACAI,EAAAA,YAAQ,IAAA;AACTD,EAAAA,KAAA,EAAA;CACD,EACE;AACAH,EAAAA,IAAA,EAAA,OAAA;AACAI,EAAAA,YAAQ,KAAA;AACTD,EAAAA,KAAA,EAAA;CACD,EACE;AACAH,EAAAA,IAAA,EAAA,QAAU;AACVI,EAAAA,YAAQ,KAAA;AACTD,EAAAA,KAAA,EAAA;CACD,EACE;AACAH,EAAAA,IAAA,EAAA,aAAgB;AAChBI,EAAAA,YAAQ,KAAA;AACTD,EAAAA,KAAA,EAAA;CACD,EACE;AACAH,EAAAA,IAAA,EAAA,YAAiB;AACjBI,EAAAA,YAAQ,IAAA;AACTD,EAAAA,KAAA,EAAA;CACD,EACE;AACAH,EAAAA,IAAA,EAAA,OAAA;AACAI,EAAAA,YAAQ,IAAA;AACTD,EAAAA,KAAA,EAAA;CACD,EACE;AACAH,EAAAA,IAAA,EAAA,UAAY;AACZI,EAAAA,YAAQ,KAAA;AACTD,EAAAA,KAAA,EAAA;CACD,EACE;AACAH,EAAAA,IAAA,EAAA,kBAAiB;AACjBI,EAAAA,YAAQ,KAAA;AACTD,EAAAA,KAAA,EAAA;CACD,EACE;AACAH,EAAAA,IAAA,EAAA,QAAU;AACVI,EAAAA,YAAQ,IAAA;AACTD,EAAAA,KAAA,EAAA;CACD;;;;;;;;;;SCzFG9D,YAAAA,CAAAC,KAAA,EAAA;QACFC,cAAA,GAAA,EAAA;AACD,EAAA,KAAA,mBAAsB,EAAA;AACvBA,IAAAA,cAAA,CAAAC,IAAA,CAAAC,IAAA,CAAA;IAED,IAAAA,IAAA,CAAAC,QAAA,EAAA;;AAEG;AAQH;AACsB,EAAA,OAA8BH,cAAA;;MAmBwCqE,oCAAA,CAAA;MACrE;kBAEpB,GAAAhE,QAAA,IAAAA,QAAA,CAAAF,QAAA,IAAA,EAAA;;;oBA7BoD,EAAA;qCAO7B,CAAAO,cAAA,CAAA,EAAA;yBAAd,EAAA4D,QAAA,CAAApE,IAAA,CAAA,EAAA;;;AAyBZ;AAEI,IAAA,OAAA,IAAa;AACb;AAEFY,EAAAA,YAAAA,CAAAZ,IAAA,EAAA;AAEE,IAAA,MAAAa,MAAQ,GAAE,IAAA,CAAAC,aAAA,CAAAd,IAAA,CAAA;AACR,IAAA,OAAA,CAAAa,MAAA,IAAA,CAAA,CAAA,IAAA,CAAAE,IAAA,EAAAC,UAAA,CAAAH,MAAA,CAAA,IAAA,IAAA,CAAAD,YAAA,CAAAC,MAAA,CAAA;AACE;;;;;UAfoFsD,oCAAA;IAAAlD,IAAA,EAAA,EAAA;AAAAC,IAAAA,MAAA,EAAAC,EAAA,CAAAC,eAAA,CAAAC;AAAA,GAAA,CAAA;;;;UAAA8C,oCAAA;IAAA7C,YAAA,EAAA,IAAA;IAAAC,QAAA,EAAA,2CAAA;IAAAC,WAAA,EAAA,CAAA;MAAAC,YAAA,EAAA,MAAA;MAAAC,KAAA,EAAA,IAAA;AAAAC,MAAAA,SAAA,EAClFC,OAAM;MAAAC,WAAA,EAAA;AAAA,KAAA,CAAA;AAAAC,IAAAA,QAAA,EAAAX,EAAA;AAAAY,IAAAA,QAAA;;;;YALZC;AAAY,KAAA,EAAA;MAAAC,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAA8B,iBAAA;MAAA1C,QAAA,EAAA,sBAAA;MAAAiB,QAAA,EAAA,CAAA,mBAAA;AAAA,KAAA,EAAA;MAAAP,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAC,cAAA;MAAAb,QAAA,EAAA,kBAAA;MAAAc,MAAA,EAAA,CAAA,oBAAA;AAAA,KAAA,EAAA;MAAAJ,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAI,iBAAA;MAAAhB,QAAA,EAAA,qBAAA;MAAAc,MAAA,EAAA,CAAA,4BAAA;AAAA,KAAA,EAAA;MAAAJ,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAP,OAAA;MAAAL,QAAA,EAAA,UAAA;MAAAc,MAAA,EAAA,CAAA,YAAA,EAAA,aAAA,EAAA,eAAA,EAAA,kBAAA,EAAA,SAAA,EAAA,cAAA,CAAA;MAAAG,QAAA,EAAA,CAAA,SAAA;AAAA,KAAA,EAAA;MAAAP,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAA+B,iBAAA;MAAA3C,QAAA,EAAA;AAAA,KAAA,EAAA;MAAAU,IAAA,EAAA,UAAA;AAAAC,MAAAA,IAAA,EAAAS;AAAA,KAAA,EAAA;MAAAV,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAU,IAAA,CAAAC,aAAA;MAAAtB,QAAA,EAAA,sFAAA;MAAAiB,QAAA,EAAA,CAAA,WAAA,EAAA,WAAA;AAAA,KAAA,EAAA;MAAAP,IAAA,EAAA,UAAA;AAAAC,MAAAA,IAAA,EAAAY;AAAA,KAAA,EAAA;MAAAb,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAa,EAAA,CAAAC,OAAA;MAAAzB,QAAA,EAAA,UAAA;MAAAc,MAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,UAAA,CAAA;MAAAG,QAAA,EAAA,CAAA,SAAA;AAAA,KAAA,CAAA;AAAAS,IAAAA,eAAA,EAAA9B,EAAA,CAAA+B,uBAAA,CAAAC;AAAA,GAAA,CAAA;;;;;;QAI4EgB,oCAAA;EAAAf,UAAA,EAAA,CAAA;;;gBARpF,2CAAc;AAAAC,MAAAA,OAAA,EAIlB,CAAArB,aAAY,EAAAW,eAAA,EAAAG,aAAA,CAAA;MAAAG,eAAA,EACbC,uBAAA,CAAAC,MAAA;MAAApB,QAAA,EAAA,oqCAAA;MAAAuB,MAAA,EAAA,CAAA,yVAAA;AAAA,KAAA;;;QAIoB,EAAA,CAAA;qBAAb;aAAA1B,OAAM;;;;AAiBV,MAAApB,cAAA,GAAA,CACE;AACA+C,EAAAA,IAAA,EAAA,OAAA;AACDtD,EAAAA,QAAA,EAAA,CAAA;AAAAsD,IAAAA,IAAA,EAAA;AAAA,GAAA,EAAA;AAAAA,IAAAA,IAAA,EAAA;AAAA,GAAA,EAAA;AAAAA,IAAAA,IAAA,EAAA;GAAA;CACF,EACF;AACDA,EAAAA,IAAA,EAAA,YAAA;;;;;;;;;;;;;;;;;;AC9CE,0BAAa,CAAA;EACbO,WAAA,GAAQ,IAAGO,iBAAiB,CAAOrE,IAAA,IAASA,IAAG,SAAM,CAAA;AACtDsE,EAAAA,UAAA,GAAA,IAAA/D,eAAA,CAAAC,cAAA,CAAA;AAECC,EAAAA,QAAA,IAAMC,CAAY,EAAAV,IAAA,KAAA,CAAA,CAAAA,IAAA,CAAAC,QAAA,IAAAD,IAAA,CAAAC,QAAA,CAAAU,MAAA,GAAA,CAAA;;;;;8BAJL;IAAAM,IAAA,EAAA,EAAA;AAAAC,IAAAA,MAAA,EAAAC,EAAA,CAAAC,eAAA,CAAAC;AAAA,GAAA,CAAA;;;;8BAAA;IAAAC,YAAA,EAAA,IAAA;IAAAC,QAAA,EAAA,yBAAA;AAAAO,IAAAA,QAAA,EAAAX,EAAA;AAAAY,IAAAA,QAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAAA;EAAAqB,UAAA,EAAA,CAAA;;;;;uBAFgBF,uBAAA,CAAAC,MAAA;MAAApB,QAAA,EAAA,kqCAAA;MAAAuB,MAAA,EAAA,CAAA,mUAAA;AAAA,KAAA;;;AASzB,MAAA9C,cAAA,GAAa,CACb;AACD+C,EAAAA,IAAA,EAAA,OAAA;AACDtD,EAAAA,QAAA,EAAA,CAAA;AAAAsD,IAAAA,IAAA,EAAA;AAAA,GAAA,EAAA;AAAAA,IAAAA,IAAA,EAAA;AAAA,GAAA,EAAA;AAAAA,IAAAA,IAAA,EAAA;GAAA;CACE,EACA;AACDA,EAAAA,IAAA,EAAA,YAAA;AACFtD,EAAAA,QAAA,EAAA,CACF;AACDsD,IAAAA,IAAA,EAAA,OAAA;;;;;;;;;;;;;;;;AC/BE,MAAAgB,eAAiB,CAAA;AAClBC,EAAAA,mBAAAA,GAAA;WAG4CC,IAAA,CAAAC,KAAA,CAAAD,IAAA,CAAAE,MAAA,EAAA,GAAA,GAAA,CAAA,GAAA,GAAA;;AAI3CC,EAAAA,WAAAA,CAAAC,EAAmB,EAAA;AAKrB,IAAA,MAAQC,IAAA,GAAAtE,cAAA,CAAAuE,GAAA,CAAAF,EAAA,CAAA;AACN,IAAA,MAAA5E,QAAmB,GAAA6E,IAAA,EAAA7E;IAItB,OAAA+E,EAAA,CAAA/E,QAAA,CAAAgF,GAAA,CAAAC,OAAA,IAAA1E,cAAA,CAAAuE,GAAA,CAAAG,OAAA,CAAA,CAAA,CAAA,CAAA7E,IAAA,CAYK8E,KAAe,CAAA,IAAA,CAAAX,mBAAA,EAAA,CAAA,CACA;AAAnB;UAAmCY,GAAA;AAEnC,IAAA,OAAkBJ,EAAA,CAAA,CAAA,GAAAxE,cAAA,CAAA6E,MAAA,EAAA,CAAA,CAAAC,MAAA,CAAAC,KAAA,IAAA,CAAAA,KAAA,CAAA1E,MAAA,CAAA,CAAA,CAAAR,IAAA,CAChB8E,KAAA,CAAA,wBAA+B,EAAA,CAAA,CAChC;;;qBAqCc,CAAA;EACAK,GAAA;cAAAA,GAAS,EAAA;IAAT,IAAAA,CAAAA,GAAI,GAAJA,GAAI;AAAK;AAGPC,EAAAA,kBAAgBA,GAAA;AAChB,IAAA,OAAA,IAAW,CAAAD,GAAI,CAACE,eAAe,KAAC,SAAa;AAC7C;cAEOC,GAAA;IAOf,YAKD,CAAAH,GAAA,CAAAE,eAAe,KAAA,MAAA,IAAA,IAAA,CAAAF,GAAA,CAAAE,eAAA,KAAA,QAAA,KACjB,CAAA,CAAA,IAAA,CAAAF,GAAA,CAAAI,WAAU,EAAAjF,MAAA;;AAMhBkF,EAAAA,MAAAA,GAAA;IACE,OAAA,CAAA,iBAAmB,EAAI,IAAS,CAAA,IAAA,CAAAJ,kBAAmB,EAAE;;;AAuBnD,MAAAK,gBAAmB,CAAA;EAClBC,QAAA,GAAA,IAAAxB,eAAA,EAAA;EAGmByB,MAAA,GAAA,IAAAC,eAAA,CAAA;AACtBC,IAAAA,OAAA,EAAK,EAAA;AACHC,IAAAA,YAAO,EAAA,MAAO;IACdC,OAAA,EAAA,IAAAC,GAAA,EAAA;IACDC,WAAE,EAAA,IAAAD,GAAA;IACL;UAGuB,GAAA,IAAK,CAAME,MAAC,MAAM,IAAAC,KAAA,CAAAN,OAAA,CAAA;EAE5BO,QAAM,GAAA,IAAA,CAAAF,MAAA,CAAAC,KAAA,IAAAA,KAAA,CAAAJ,OAAA,CAAA;EACAM,YAAA,GAAA,IAAA,CAAAH,MAAA,CAAAC,KAAA,IAAAA,KAAA,CAAAF,WAAA,CAAA;EACRK,kBAAiB,GAAG,IAAK,CAAAJ,MAAG,CAAAC,KAAA,IAAAA,KAAA,CAAAL,YAAA,CAAA;AACnCS,EAAAA,eAAc,GAAQ,IAAA,CAAAL,MAAA,CACtB,IAAA,CAAAM,UACD,IAAA,CAAAH,YAAE,EACL,IAAC,CAAAC,kBAAA,EAEO,CAAAT,OAAA,EAAAY,OAAA,EAAmBX,YAAiB,KAC1CA,yBAAqB,IAAWD,YAAO,CAAArB,EAAA,IAAAiC,OAAA,CAAA/B,GAAA,CAAAF,EAAA,CAAA,KAAA,QAAA,CAAA;EAGvCkC,KAAK,GAAM,IAAC,CAAIR,MAAC,CACf,IAAA,CAAAK,eAAe,eACR,eACF,eACA,EAAAV,aAAa,KAAY;oBAC5B,EAAA;aACS,EAAA;;AAET,IAAA,OAAA,IAAA,CAAAc,aAAc,CAAEd,aAAa,CAAA;IAEhC;aAGmBtB,CAAAqC,QAA2C,EAAA;AAC/D,IAAA,OAAA,gBAAqB,CAAAR,QAAW,EAAA,iBAAO,EAAA,CAAAS,IAAA,EAAAJ,OAAA,KAAA;AAEvC,MAAA,MAAIK,UAAQ,GAAKD,IAAA,CAAAnC,GAAA,CAAAkC,QAAA,CAAA;AACf,MAAA,IAAAE,UAAe,EAAAzB,eAAA,KAAA,QAAA,EAAA;eACZ,EAAA;AACJ;AACF,MAAA,MAAA0B,QAAA,GAAAD,UAAA,CAAAvB,WAAA,IAAA,EAAA;AAEe,MAAA,IAAAwB,QACN,CAAAC,IAAA,CAAExC,aAAmB,CAAAE,GACV,CAAAF,EAAA,CACnB,KAAiB,QAAA,CAAA,EAAA;AAEjB,QAAA,OAAM,EAAA;AACN;aACO,IAAA,CAAAmC,aAAA,CAAAI,QAAA,EAAAF,IAAA,CAAA;;AAEH;;IAGI,IAAA,CAAAI,gBAAA,EAAA;IACA,IAAA,CAAAvB,QAAA,CAAAX,QAAA,EAAA,CAAAmC,SAAA,CAAAR,KAAA,IAAA;;;;AAKES,EAAAA,YAAAA,CAAAP,QAAA,EAAA;AACD,IAAA,IAAA,CAAAQ,mBAAA,CAAAR,QAAA,CAAA;6BACQ,CAAAA,QAAA,CAAA,CAAAM,SAAA,CAAAtH,QAAA,IAAA;AACb,MAAA,IAAA,CAAAyH,cAAE,CAAAT,QAAA,EAAAhH,QAAA,CAAA;;;AAIFqH,EAAAA,gBAAcA,GAAA;AACd,IAAA,IAAA,CAAAtB,MAAA,CAAA2B,IAAO,CAAA;AACP,MAAA,GAAA,IAAA,CAAA3B,MAAc,CAAA4B,KAAA;kBACd,EAAA;;;AAKJC,EAAAA,SAAUA,CAAAd,KAAA,EAAA;sBACE,GAAK,IAAI,CAAAf,MAAK,CAAA4B,KAAA;eAEpB,CAAAD,IAAM,CAAA;AACb,MAAA,GAAAG,YAAA;MAEK5B,SAC6Ca,KAAA,CAAA9B,GAAA,CAAA8C,IAAA,IAAAA,IAAA,CAAAlD,EAAA,CAAA;kBAE3C,EAAA,QAAU;SACV,IAAA,CAAAmD,QAAA,CAAAF,YAAc,EAAAf,KAAA;KAEpB,CAAA;;AAOJU,EAAAA,mBAAAA,CAAAR,QAAA,EAAA;;IAEG,MAAAE,UAAA,GAAAW,YAAA,CAAA1B,OAAA,CAAArB,GAAA,CAAAkC,QAAA,CAAA;AASgB,IAAA,IAAA,CAAAjB,MAAa,CAAA2B,IAAA,CAAI;AAElC,MAAA,GAAAG;AACA1B,MAAAA,OAAY,EAAA,IAAWC,GAAA,CAAA,CAEvB,GAAAyB,YAAoC,UACpC,IAAUX,UAAgB,GAAqB,CAAE,CAAAF,QAAQ,EAAA;AAAA,QAAA,GAAAE,UAAa;AAAKzB,QAAAA,eAAC,EAAA;AAAA,OAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAChE,CAAA;AAEJY,MAAAA,WAAA,EAAA,IAAAD,GAAA,CAAA,CACN,GAAAyB,YAAe,CAACxB,WAAW,EAC5B,IAAAa,UAAA,EAAAvB,WAAA,EAAAX,GAAA,CAAAC,OAAA,IAAA,CAAAA,OAAA,EAAA,SAAA,CAAA,CAAA,IAAA,EAAA,CAAA,CAEO;;;EAILwC,cAAAA,CAAAT,QAAA,EAAAgB,SAAA,EAAA;AACH,IAAA,MAACH,YAAA,GAAA,IAAA,CAAA9B,MAAA,CAAA4B,KAAA;;;;;AAzBS;AA4BMI,EAAAA,QAAAA,CAEd;IAAA5B,OAAA;AAAAE,IAAAA;GAAA,EACEY,IAAO,EACPD,QAAa,EAAA;IAEd,MAAAE,UAAA,GAAAF,QAAA,IAAAb,OAAA,CAAArB,GAAA,CAAAkC,QAAA,CAAA;AACD,IAAA,MAAKiB,WAAW,GAAEhB,IAAA,CAAAiB,OAAS,CAAA5C,KAAQ,IAAIA,KAAA,CAAAtF,QAAA,IAAA,EAAA,CAAA;IACvC,OAAK;AACJmG,MAAAA,OAAI,EAAK,IAAEC,GAAM,CAAA,CAClB,GAAAD,OAAA,EACE,OAAO,CAAAnB,GAAA,CAAAM,KAAA,IAAA;AACP,QAAA,OAAkB,CAClBA,KAAU,CAAAV,EAAM,EACjB;UACDA,EAAA,EAAAU,KAAA,CAAAV,EAAA;UACWtB,IAAA,EAAAgC,KAAA,CAAAhC,IAAA;UACH0D,QAAO;UACPrB,WAAK,EAAAL,KAAA,CAAAtF,QAAA;AACXyF,UAAAA;SACD,CACD;OACE,CAAE,EACF,IAAIyB,UAAU,GAAA,CAAA,CAAAF,QAAA,EAAA;AAAA,QAAA,GAAAE,UAAA;AAAAzB,QAAAA,eAAA,EAAA;AAAA,OAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CACd,CAAA;AACAY,MAAAA,WAAU,EAAC,IAAOD,GAAA,CAAA,CACnB,GAAAC,WAAA,EACE,GAAEY,IAAA,CAAAjC,GAAS,CAAAM,KAAM,IAAA,CAAAA,KAAU,CAAEV,EAAA,EAAA,QAAQ,CAAM,CAAA,EAC3C,GAAEqD,WAAS,CAAIjD,GAAE,CAAAC,OAAA,IAAA,CAAAA,OAAmB,EAAA,MAAQ,CAAM,CAAA,CACpD;AACA,KAAA;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvOI,MAAAkD,iBAA2B,CAAA;kBACT,GAAA,CAAA,CAAA;AACpBC,EAAAA,WAAG,GAAA,IAAA;AACEC,EAAAA,MAAA,GAAgB,EAAA;AAEnBC,EAAAA,kBAAc,GAAA,KAAA;eAEIC,GAAA;IACpB,IAAA,IAAA,CAACD,kBAAE,EAAA;;;aAGC,CAAAD,MAAc,CAAA3H,MAAA,EAAA;;AAEtB;IAGE,IAAA,CAAA8H,eAAY,EAAA;IAGd,IAA2D,CAAAF,kBAAA,GAAA,IAAA;AAClD;;QASPG,KAAQ,YAASC,SAAC,EAAA;AAChB,MAAA,IAAA,CAAAL,MAAK,GAAGI,KAAA,CAAAE,OAAA,EAAA;mBACqE,CAAArB,SAAA,CAAAsB,QAAA,IAAA;mBACpE,GAAAA,QAAA,CAAAD,OAAA,EAAA;AAET,QAAA,IAAA,CAAAE,sBAAgB,CAAA,IAAA,CAAAR,MAAA,CAAA;QAChB,IAAA,CAAAE,aAAM,EAAA;;2BAEE,CAAAE,KAAA,CAAA,EAAA;AAERA,MAAAA,KAAA,CAAAnB,kBAAc,IAAA;QACd,IAAA,CAAAe,MAAM,GAAAO,QAAA;mCACmB,CAAAA,QAAG,CAAA;0BACpB,EAAA;AAER,OAAA,CAAA;AACA,KAAA,MAAA;iBACM,GAAAH,KAAmB;wBACjB,EAAA;AAER;AACA;;AAIA,IAAA,IAAA,CAAAK,MAAA,CAAAC,QAAS,EAAA;;QAKH,GAAA,IAAeC,OAAA,EAAG;WAOzBC,CAAAC,KAAA,EAAA;AACH,IAAA,MAACC,OAAA,GAAAD,KAAA,CAAAC,OAAA;AAGD,IAAA,QAAkBA,OAAA;WACTC,GAAA;AAGwB,QAAA;WAExBC,UAAK;AACb,MAAA,KAAAC,CAAA;QAeD,IAAA,CAASC,cAA0B,EAAA;AACjC,QAAA;AAGA,MAAA,KAAAC,QAAS;AAEL,MAAA,KAAAC,CAAA;QACA,IAAA,CAACC,kBAAsB,EAAA;AAC3B,QAAA;WAECC,WAAA;WACKC,CAAA;QAEN,IAAuE,CAAAC,kBAAA,EAAA;AACvE,QAAA;WAECC,UAAA;AAED,MAAA,KAAAC,CAAI;QACJ,IAAI,CAACC,oBAAmB,EAAA;AAExB,QAAA;eAEM;QACN,IAAC,CAAAxB,eAAA,EAAA;AACD,QAAA;AAED,MAAA,KAAAyB,GAAA;QAEO,IAAA,CAAAC,cAAuB,EAAa;AAC1C,QAAA;AAEE,MAAA,KAAAC,KAAA;gBAEI;QACF,IAAA,CAAAC,oBAAK,EAAA;;;;oBAOKC,GAAA;IAChB,OAAC,IAAA,CAAAC,gBAAA;;eAKAC,GAAA;IAED,OAAqC,IAAA,CAAAnC,WAAA;;AAmBnCoC,EAAAA,SAAAA,CAAIC,aAAyBC,OAAA,GAAA,EAAA,EAAA;WAE5B,CAAAC,eAAA,KAAA,IAAA;IAEH,IAACC,KAAA,GAED,OAAAH,WAAA,KAAA,QAAA,iBAEG,IAAA,CAAApC,MAAA,CAAAwC,SAAA,CAAAhG,IAAA,IAAAA,IAAA,KAAA4F,WAAA,CAAA;IACK,IAAoBG,KAAA,GAAA,CAAA,IAAAA,KAAA,IAAA,IAAA,CAAAvC,MAAA,CAAA3H,MAAA,EAAA;AAC1B,MAAA;;UAECoK,UAAA,GAAA,IAAA,CAAAzC,MAAA,CAAAuC,KAAA,CAAA;QAID,IAAC,CAAAxC,WAAA,KAAA,IAAA,IAAA0C,UAAA,KAAA,IAAA,CAAA1C,WAAA,EAAA;;;oBAGU,GAAA0C,UAAA,IAAA,IAAA;yBACR,GAAAF,KAAA;QAEHF,OAAC,CAAAC,eAAA,EAAA;MAGH,IAAA,CAAA7B,MAAA,CAAApB,IAAA,CAAA,IAAA,CAAAU,WAAA,CAAA;;AAEG,IAAA,IAAA,CAAAA,WAAA,EAAA2C,KAAA,EAAA;IACK,IAAkB,CAAAX,oBAAA,EAAA;AACxB;AAECvB,EAAAA,sBAAAA,CAAAD,QAAA,EAAA;AAED,IAAA,MAAAkC,UAAgC,GAAA,IAAA,CAAA1C,WAAA;AAC9B,IAAA,IAAA0C,UAAK,EAAA;YACNE,QAAA,GAAApC,QAAA,CAAAiC,SAAA,CAAAhG,IAAA,IAAAA,IAAA,KAAAiG,UAAA,CAAA;MACC,IAAAE,QAAA,GAAA,CAAA,CAAA,IAAAA,kBAAiCV,gBAAe,EAAA;QAC7C,IAAA,CAAAA,gBAAY,GAACU,QAAA;;AAEZ;;AAIAxC,EAAAA,eAAKA,GAAA;IACP,IAAA,CAAAgC,SAAG,CAAA,IAAA,CAAAS,2BAAA,CAAA,CAAA,CAAA,CAAA,CAAA;;AAKPf,EAAAA,cAAUA,GAAA;AACR,IAAA,IAAA,CAAAM,SAAA,CAAO,KAAKU,+BAAC,CAAA,IAAA,CAAA7C,MAAA,CAAA3H,MAAA,CAAA,CAAA;;AAIb6I,EAAAA;IACJ,IAAC,CAAAiB,SAAA,CAAA,IAAA,CAAAS,2BAAA,CAAA,IAAA,CAAAX,gBAAA,CAAA,CAAA;;AAKFZ,EAAAA,kBAAAA,GAAA;IAED,IAAA,CAASc,SAAwB,CAAA,IAAA,CAAAU,+BAAA,CAAA,IAAA,CAAAZ,gBAAA,CAAA,CAAA;;AAK/BW,EAAAA,2BAAyBA,CAAAE,aAAA,EAAA;IACzB,IAAAA,aAAoC,GAAA,CAAA,GAAA,IAAA,CAAA9C,MAAA,CAAA3H,MAAA,EAAA;MACpC,OAAAyK,aAAA,GAAA,CAAA;AAEF;;AAEG;AAUUD,EAAAA,gCACLC,aACC,EAAA;AAGP,IAAA,IAAAA,aAAiB,GAAA,CAAA,IAAA,CAAA,EAAA;MAET,OAAAA,aAAsC,GAAG,CAAA;AAEjD;WACQA;AAEN;AAMAnB,EAAAA,oBAAYA,GAAA;AACd,IAAA,IAAC,CAAA,IAAA,CAAA5B,WAAA,EAAA;AAED,MAAA;;AAGI,IAAA,IAAA,IAAA,CAAAgD,wBAAyB,EAAA;AACvB,MAAA,IAAA,CAAAhD,WAAA,CAAOiD,QAAM,EAAA;;AAEf,MAAA,MAAAzK,MAAM,GAAG,IAAI,CAACwH,qBAAqB,EAAC;UACrC,CAAAxH,MAAA,EAAA;AACD,QAAA;AACD;;;;oBAGqCiJ,GAAA;AACtC,IAAA,IAAA,CAAA,IAAA,CAAAzB,WAAA,EAAA;AACE,MAAA;AACA;AAED,IAAA,IAAA,CAAA,IAAA,CAAAgD,sBAAA,EAAA,EAAA;AACD,MAAA,IAAA,CAAAhD,WAAA,CAAAkD,MAAA,EAAA;AACE,KAAA,MAAA;MACAC,gBAAiB,CAAA,IAAA,CAAAnD,WAAA,CAAAzD,WAAA,EAAA,CAAA,CACjBvE,IAAK,KAAG,CAAA,CAAA,CAAA,CAAA,CACTkH,SAAA,CAAAtH,QAAA,IAAA;AACD,QAAA,MAAAwL,UAAA,GAAAxL,QAAA,CAAA,CAAA,CAAA;QACE,IAAM,CAAQwL,UAAA,EAAA;AACd,UAAA;AACA;AACD,QAAA,IAAA,CAAAhB,SAAA,CAAAgB,UAAA,CAAA;AACD,OAAA,CAAA;AACE;AACA;AAEDJ,EAAAA,sBAAAA,GAAA;AACD,IAAA,IAAA,CAAA,IAAA,CAAAhD,WAAA,EAAA;AACE,MAAA,YAAkB;AAClB;IACA,OAAA,OAAQ,IAAA,CAAAA,WAAA,CAAArH,UAAA,KAAA,SAAA,GACT,IAAA,CAAAqH,WAAA,CAAArH,UAAA,GACD,IAAA,CAAAqH,WAAA,CAAArH,UAAA,EAAA;AACE;AAEAqJ,EAAAA,oBAAQA,GAAA;AACT,IAAA,IAAA,CAAAhC,WAAA,EAAAqD,QAAA,EAAA;AACD;;AAGE,SAAAC,wBAAQA,GAAA;AACT,EAAA,OAAAjD,KAAA,IAAA,IAAAN,iBAAA,CAAAM,KAAA,CAAA;AACD;AAEE,MAAAkD,6BAAiB,GAAA;AACjBC,EAAAA,OAAA,EAAAC,gBAAQ;AACTC,EAAAA,UAAA,EAAAJ;AACD,CAAA;AAaE,MAAKK,8BAAG,CAAA;AACTlI,EAAAA,WAAA,GAAA,IAAAC,eAAA,CACD/D,IAAA,IAAAA,IAAA,CAAA0D,KAAA;;;;;;;;;;;;;;;;;;;;;;;;;;UAFOsI,8BAAG;IAAA/K,IAAA,EAAA,EAAA;AAAAC,IAAAA,MAAA,EAAAC,EAAA,CAAAC,eAAA,CAAAC;AAAA,GAAA,CAAA;;;;UAAH2K,8BAAG;IAAA1K,YAAA,EAAA,IAAA;IAAAC,QAAA,EAAA,qCAAA;IAAA0K,SAAA,EAHV,CAAAL,6BAAA,CAAA;AAAA9J,IAAAA,QAAA,EAAAX,EAAA;AAAAY,IAAAA,QAAA;;;;YADCC;AAAA,KAAA,EAAA;MAAAC,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAC,cAAA;MAAAb,QAAA,EAAA,kBAAA;MAAAc,MAAA,EAAA,CAAA,oBAAA;AAAA,KAAA,EAAA;MAAAJ,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAG,kBAAA;MAAAf,QAAA,EAAA,sBAAA;MAAAc,MAAA,EAAA,CAAA,oBAAA,EAAA,0BAAA;AAAA,KAAA,EAAA;MAAAJ,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAI,iBAAA;MAAAhB,QAAA,EAAA,qBAAA;MAAAc,MAAA,EAAA,CAAA,4BAAA;AAAA,KAAA,EAAA;MAAAJ,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAP,OAAA;MAAAL,QAAA,EAAA,UAAA;MAAAc,MAAA,EAAA,CAAA,YAAA,EAAA,aAAA,EAAA,eAAA,EAAA,kBAAA,EAAA,SAAA,EAAA,cAAA,CAAA;MAAAG,QAAA,EAAA,CAAA,SAAA;AAAA,KAAA,EAAA;MAAAP,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAC,EAAA,CAAAM,WAAA;MAAAlB,QAAA,EAAA,eAAA;MAAAc,MAAA,EAAA,CAAA,MAAA,EAAA,cAAA,EAAA,YAAA,EAAA,YAAA,EAAA,2BAAA,CAAA;MAAAK,OAAA,EAAA,CAAA,YAAA,EAAA,gBAAA,CAAA;MAAAF,QAAA,EAAA,CAAA,aAAA;AAAA,KAAA,EAAA;MAAAP,IAAA,EAAA,UAAA;AAAAC,MAAAA,IAAA,EAAAS;AAAA,KAAA,EAAA;MAAAV,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAU,IAAA,CAAAC,aAAA;MAAAtB,QAAA,EAAA,sFAAA;MAAAiB,QAAA,EAAA,CAAA,WAAA,EAAA,WAAA;AAAA,KAAA,EAAA;MAAAP,IAAA,EAAA,UAAA;AAAAC,MAAAA,IAAA,EAAAY;AAAA,KAAA,EAAA;MAAAb,IAAA,EAAA,WAAA;MAAAC,IAAA,EAAAa,EAAA,CAAAC,OAAA;MAAAzB,QAAA,EAAA,UAAA;MAAAc,MAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,UAAA,CAAA;MAAAG,QAAA,EAAA,CAAA,SAAA;AAAA,KAAA,CAAA;AAAAS,IAAAA,eAAA,EAAA9B,EAAA,CAAA+B,uBAAA,CAAAC;AAAA,GAAA,CAAA;;;;;;QAIM6I,8BAAG;EAAA5I,UAAA,EAAA,CAAA;UARV/B,SAAA;;gBACM,qCAAY;AAAAgC,MAAAA,OAAA,EAGjB,CAAArB,aAAA,EAAAW,eAAA,EAAAG,aAAA,CAAA;MAAAmJ,SAAA,EACD,CAAAL,6BAAA,CAAA;MAAA3I,eAAA,EACiBC,uBAAA,CAAAC,MAAA;MAAApB,QAAA,EAAA,u5CAAA;MAAAuB,MAAA,EAAA,CAAA,qEAAA;AAAA,KAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}