{"version":3,"file":"tree.mjs","sources":["../../../../../../../src/components-examples/cdk/tree/tree-data.ts","../../../../../../../src/components-examples/cdk/tree/cdk-tree-flat-children-accessor/cdk-tree-flat-children-accessor-example.ts","../../../../../../../src/components-examples/cdk/tree/cdk-tree-flat-children-accessor/cdk-tree-flat-children-accessor-example.html","../../../../../../../src/components-examples/cdk/tree/cdk-tree-flat-level-accessor/cdk-tree-flat-level-accessor-example.ts","../../../../../../../src/components-examples/cdk/tree/cdk-tree-flat-level-accessor/cdk-tree-flat-level-accessor-example.html","../../../../../../../src/components-examples/cdk/tree/cdk-tree-flat/cdk-tree-flat-example.ts","../../../../../../../src/components-examples/cdk/tree/cdk-tree-flat/cdk-tree-flat-example.html","../../../../../../../src/components-examples/cdk/tree/cdk-tree-nested-level-accessor/cdk-tree-nested-level-accessor-example.ts","../../../../../../../src/components-examples/cdk/tree/cdk-tree-nested-level-accessor/cdk-tree-nested-level-accessor-example.html","../../../../../../../src/components-examples/cdk/tree/cdk-tree-nested-children-accessor/cdk-tree-nested-children-accessor-example.ts","../../../../../../../src/components-examples/cdk/tree/cdk-tree-nested-children-accessor/cdk-tree-nested-children-accessor-example.html","../../../../../../../src/components-examples/cdk/tree/cdk-tree-nested/cdk-tree-nested-example.ts","../../../../../../../src/components-examples/cdk/tree/cdk-tree-nested/cdk-tree-nested-example.html","../../../../../../../src/components-examples/cdk/tree/cdk-tree-complex/cdk-tree-complex-example.ts","../../../../../../../src/components-examples/cdk/tree/cdk-tree-complex/cdk-tree-complex-example.html","../../../../../../../src/components-examples/cdk/tree/cdk-tree-custom-key-manager/cdk-tree-custom-key-manager-example.ts","../../../../../../../src/components-examples/cdk/tree/cdk-tree-custom-key-manager/cdk-tree-custom-key-manager-example.html","../../../../../../../src/components-examples/cdk/tree/tree_public_index.ts"],"sourcesContent":["/** Flat node with expandable and level information */\nexport interface FlatFoodNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n  isExpanded?: boolean;\n}\n\nexport const FLAT_DATA: FlatFoodNode[] = [\n  {\n    name: 'Fruit',\n    expandable: true,\n    level: 0,\n  },\n  {\n    name: 'Apple',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Banana',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Fruit loops',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Vegetables',\n    expandable: true,\n    level: 0,\n  },\n  {\n    name: 'Green',\n    expandable: true,\n    level: 1,\n  },\n  {\n    name: 'Broccoli',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Brussels sprouts',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Orange',\n    expandable: true,\n    level: 1,\n  },\n  {\n    name: 'Pumpkins',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Carrots',\n    expandable: false,\n    level: 2,\n  },\n];\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n */\nexport interface NestedFoodNode {\n  name: string;\n  children?: NestedFoodNode[];\n}\n\nexport const NESTED_DATA: NestedFoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}],\n  },\n  {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\n      },\n      {\n        name: 'Orange',\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\n      },\n    ],\n  },\n];\n","import {ArrayDataSource} from '@angular/cdk/collections';\nimport {CdkTree, CdkTreeModule} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {timer} from 'rxjs';\nimport {mapTo} from 'rxjs/operators';\nimport {NestedFoodNode, NESTED_DATA} from '../tree-data';\n\nfunction flattenNodes(nodes: NestedFoodNode[]): NestedFoodNode[] {\n  const flattenedNodes = [];\n  for (const node of nodes) {\n    flattenedNodes.push(node);\n    if (node.children) {\n      flattenedNodes.push(...flattenNodes(node.children));\n    }\n  }\n  return flattenedNodes;\n}\n\n/**\n * @title Tree with flat nodes\n */\n@Component({\n  selector: 'cdk-tree-flat-children-accessor-example',\n  templateUrl: 'cdk-tree-flat-children-accessor-example.html',\n  styleUrls: ['cdk-tree-flat-children-accessor-example.css'],\n  standalone: true,\n  imports: [CdkTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkTreeFlatChildrenAccessorExample {\n  @ViewChild(CdkTree)\n  tree!: CdkTree<NestedFoodNode>;\n\n  childrenAccessor = (dataNode: NestedFoodNode) => timer(100).pipe(mapTo(dataNode.children ?? []));\n\n  dataSource = new ArrayDataSource(NESTED_DATA);\n\n  hasChild = (_: number, node: NestedFoodNode) => !!node.children?.length;\n\n  getParentNode(node: NestedFoodNode) {\n    for (const parent of flattenNodes(NESTED_DATA)) {\n      if (parent.children?.includes(node)) {\n        return parent;\n      }\n    }\n\n    return null;\n  }\n\n  shouldRender(node: NestedFoodNode) {\n    let parent = this.getParentNode(node);\n    while (parent) {\n      if (!this.tree.isExpanded(parent)) {\n        return false;\n      }\n      parent = this.getParentNode(parent);\n    }\n    return true;\n  }\n}\n","<cdk-tree #tree [dataSource]=\"dataSource\" [childrenAccessor]=\"childrenAccessor\">\n  <!-- This is the tree node template for leaf nodes -->\n  <cdk-tree-node *cdkTreeNodeDef=\"let node\" cdkTreeNodePadding\n                 [style.display]=\"shouldRender(node) ? 'flex' : 'none'\"\n                 [isDisabled]=\"!shouldRender(node)\"\n                 class=\"example-tree-node\">\n    <!-- use a disabled button to provide padding for tree leaf -->\n    <button mat-icon-button disabled></button>\n    {{node.name}}\n  </cdk-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <cdk-tree-node *cdkTreeNodeDef=\"let node; when: hasChild\" cdkTreeNodePadding\n                 cdkTreeNodeToggle\n                 [cdkTreeNodeTypeaheadLabel]=\"node.name\"\n                 [style.display]=\"shouldRender(node) ? 'flex' : 'none'\"\n                 [isDisabled]=\"!shouldRender(node)\"\n                 [isExpandable]=\"true\"\n                 class=\"example-tree-node\">\n    <button mat-icon-button cdkTreeNodeToggle [attr.aria-label]=\"'Toggle ' + node.name\">\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{tree.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n  </cdk-tree-node>\n</cdk-tree>\n","import {ArrayDataSource} from '@angular/cdk/collections';\nimport {CdkTree, CdkTreeModule} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {FlatFoodNode, FLAT_DATA} from '../tree-data';\n\n/**\n * @title Tree with flat nodes\n */\n@Component({\n  selector: 'cdk-tree-flat-level-accessor-example',\n  templateUrl: 'cdk-tree-flat-level-accessor-example.html',\n  styleUrls: ['cdk-tree-flat-level-accessor-example.css'],\n  standalone: true,\n  imports: [CdkTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkTreeFlatLevelAccessorExample {\n  @ViewChild(CdkTree)\n  tree: CdkTree<FlatFoodNode>;\n\n  levelAccessor = (dataNode: FlatFoodNode) => dataNode.level;\n\n  dataSource = new ArrayDataSource(FLAT_DATA);\n\n  hasChild = (_: number, node: FlatFoodNode) => node.expandable;\n\n  getParentNode(node: FlatFoodNode) {\n    const nodeIndex = FLAT_DATA.indexOf(node);\n\n    // Determine the node's parent by finding the first preceding node that's\n    // one level shallower.\n    for (let i = nodeIndex - 1; i >= 0; i--) {\n      if (FLAT_DATA[i].level === node.level - 1) {\n        return FLAT_DATA[i];\n      }\n    }\n\n    return null;\n  }\n\n  shouldRender(node: FlatFoodNode): boolean {\n    // This node should render if it is a root node or if all of its ancestors are expanded.\n    const parent = this.getParentNode(node);\n    return !parent || (!!this.tree?.isExpanded(parent) && this.shouldRender(parent));\n  }\n}\n","<cdk-tree #tree [dataSource]=\"dataSource\" [levelAccessor]=\"levelAccessor\">\n  <!-- This is the tree node template for leaf nodes -->\n  <cdk-tree-node *cdkTreeNodeDef=\"let node\" cdkTreeNodePadding\n                 [style.display]=\"shouldRender(node) ? 'flex' : 'none'\"\n                 [isDisabled]=\"!shouldRender(node)\"\n                 class=\"example-tree-node\">\n    <!-- use a disabled button to provide padding for tree leaf -->\n    <button mat-icon-button disabled></button>\n    {{node.name}}\n  </cdk-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <cdk-tree-node *cdkTreeNodeDef=\"let node; when: hasChild\" cdkTreeNodePadding\n                 cdkTreeNodeToggle\n                 [cdkTreeNodeTypeaheadLabel]=\"node.name\"\n                 [style.display]=\"shouldRender(node) ? 'flex' : 'none'\"\n                 [isDisabled]=\"!shouldRender(node)\"\n                 [isExpandable]=\"node.expandable\"\n                 class=\"example-tree-node\">\n    <button mat-icon-button cdkTreeNodeToggle\n            [attr.aria-label]=\"'Toggle ' + node.name\"\n            [style.visibility]=\"node.expandable ? 'visible' : 'hidden'\">\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{tree.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n  </cdk-tree-node>\n</cdk-tree>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {ArrayDataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, CdkTreeModule} from '@angular/cdk/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\nconst TREE_DATA: ExampleFlatNode[] = [\n  {\n    name: 'Fruit',\n    expandable: true,\n    level: 0,\n  },\n  {\n    name: 'Apple',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Banana',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Fruit loops',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Vegetables',\n    expandable: true,\n    level: 0,\n  },\n  {\n    name: 'Green',\n    expandable: true,\n    level: 1,\n  },\n  {\n    name: 'Broccoli',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Brussels sprouts',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Orange',\n    expandable: true,\n    level: 1,\n  },\n  {\n    name: 'Pumpkins',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Carrots',\n    expandable: false,\n    level: 2,\n  },\n];\n\n/** Flat node with expandable and level information */\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n  isExpanded?: boolean;\n}\n\n/**\n * @title Tree with flat nodes\n */\n@Component({\n  selector: 'cdk-tree-flat-example',\n  templateUrl: 'cdk-tree-flat-example.html',\n  styleUrl: 'cdk-tree-flat-example.css',\n  standalone: true,\n  imports: [CdkTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkTreeFlatExample {\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    node => node.level,\n    node => node.expandable,\n  );\n\n  dataSource = new ArrayDataSource(TREE_DATA);\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n\n  getParentNode(node: ExampleFlatNode) {\n    const nodeIndex = TREE_DATA.indexOf(node);\n\n    for (let i = nodeIndex - 1; i >= 0; i--) {\n      if (TREE_DATA[i].level === node.level - 1) {\n        return TREE_DATA[i];\n      }\n    }\n\n    return null;\n  }\n\n  shouldRender(node: ExampleFlatNode) {\n    let parent = this.getParentNode(node);\n    while (parent) {\n      if (!parent.isExpanded) {\n        return false;\n      }\n      parent = this.getParentNode(parent);\n    }\n    return true;\n  }\n}\n","<cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <!-- This is the tree node template for leaf nodes -->\n  <cdk-tree-node *cdkTreeNodeDef=\"let node\" cdkTreeNodePadding\n                 [style.display]=\"shouldRender(node) ? 'flex' : 'none'\"\n                 [isDisabled]=\"!shouldRender(node)\"\n                 class=\"example-tree-node\">\n    <!-- use a disabled button to provide padding for tree leaf -->\n    <button mat-icon-button disabled></button>\n    {{node.name}}\n  </cdk-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <cdk-tree-node *cdkTreeNodeDef=\"let node; when: hasChild\" cdkTreeNodePadding\n                 cdkTreeNodeToggle [cdkTreeNodeTypeaheadLabel]=\"node.name\"\n                 [style.display]=\"shouldRender(node) ? 'flex' : 'none'\"\n                 [isDisabled]=\"!shouldRender(node)\"\n                 (expandedChange)=\"node.isExpanded = $event\"\n                 class=\"example-tree-node\">\n    <button mat-icon-button cdkTreeNodeToggle\n            [attr.aria-label]=\"'Toggle ' + node.name\"\n            [style.visibility]=\"node.expandable ? 'visible' : 'hidden'\">\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n  </cdk-tree-node>\n</cdk-tree>\n","import {ArrayDataSource} from '@angular/cdk/collections';\nimport {CdkTree, CdkTreeModule} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {FLAT_DATA, FlatFoodNode} from '../tree-data';\n\n/**\n * @title Tree with nested nodes and level accessor\n */\n@Component({\n  selector: 'cdk-tree-nested-level-accessor-example',\n  templateUrl: 'cdk-tree-nested-level-accessor-example.html',\n  styleUrls: ['cdk-tree-nested-level-accessor-example.css'],\n  standalone: true,\n  imports: [CdkTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkTreeNestedLevelAccessorExample {\n  @ViewChild(CdkTree) tree: CdkTree<FlatFoodNode>;\n\n  levelAccessor = (dataNode: FlatFoodNode) => dataNode.level;\n\n  dataSource = new ArrayDataSource(FLAT_DATA);\n\n  hasChild = (_: number, node: FlatFoodNode) => node.expandable;\n\n  getParentNode(node: FlatFoodNode) {\n    const nodeIndex = FLAT_DATA.indexOf(node);\n\n    // Determine the node's parent by finding the first preceding node that's\n    // one level shallower.\n    for (let i = nodeIndex - 1; i >= 0; i--) {\n      if (FLAT_DATA[i].level === node.level - 1) {\n        return FLAT_DATA[i];\n      }\n    }\n\n    return null;\n  }\n\n  shouldRender(node: FlatFoodNode): boolean {\n    // This node should render if it is a root node or if all of its ancestors are expanded.\n    const parent = this.getParentNode(node);\n    return !parent || (!!this.tree?.isExpanded(parent) && this.shouldRender(parent));\n  }\n}\n","<cdk-tree #tree [dataSource]=\"dataSource\" [levelAccessor]=\"levelAccessor\">\n  <!-- This is the tree node template for leaf nodes -->\n  <cdk-nested-tree-node #treeNode=\"cdkNestedTreeNode\" *cdkTreeNodeDef=\"let node\"\n      class=\"example-tree-node\">\n    <!-- use a disabled button to provide padding for tree leaf -->\n    <button mat-icon-button disabled></button>\n    {{node.name}}\n  </cdk-nested-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <cdk-nested-tree-node\n    #treeNode=\"cdkNestedTreeNode\"\n    [cdkTreeNodeTypeaheadLabel]=\"node.name\"\n    *cdkTreeNodeDef=\"let node; when: hasChild\"\n    isExpandable\n    class=\"example-tree-node\">\n    <button\n      mat-icon-button\n      class=\"example-toggle\"\n      [attr.aria-label]=\"'Toggle ' + node.name\"\n      cdkTreeNodeToggle>\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{tree.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n    <div [class.example-tree-invisible]=\"!tree.isExpanded(node)\">\n      <ng-container cdkTreeNodeOutlet></ng-container>\n    </div>\n  </cdk-nested-tree-node>\n</cdk-tree>\n","import {ArrayDataSource} from '@angular/cdk/collections';\nimport {CdkTree, CdkTreeModule} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {NestedFoodNode, NESTED_DATA} from '../tree-data';\n\nfunction flattenNodes(nodes: NestedFoodNode[]): NestedFoodNode[] {\n  const flattenedNodes = [];\n  for (const node of nodes) {\n    flattenedNodes.push(node);\n    if (node.children) {\n      flattenedNodes.push(...flattenNodes(node.children));\n    }\n  }\n  return flattenedNodes;\n}\n\n/**\n * @title Tree with nested nodes using childAccessor\n */\n@Component({\n  selector: 'cdk-tree-nested-children-accessor-example',\n  templateUrl: 'cdk-tree-nested-children-accessor-example.html',\n  styleUrls: ['cdk-tree-nested-children-accessor-example.css'],\n  standalone: true,\n  imports: [CdkTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkTreeNestedChildrenAccessorExample {\n  @ViewChild(CdkTree) tree: CdkTree<NestedFoodNode>;\n\n  childrenAccessor = (dataNode: NestedFoodNode) => dataNode.children ?? [];\n\n  dataSource = new ArrayDataSource(NESTED_DATA);\n\n  hasChild = (_: number, node: NestedFoodNode) => !!node.children && node.children.length > 0;\n\n  getParentNode(node: NestedFoodNode) {\n    for (const parent of flattenNodes(NESTED_DATA)) {\n      if (parent.children?.includes(node)) {\n        return parent;\n      }\n    }\n\n    return null;\n  }\n\n  shouldRender(node: NestedFoodNode): boolean {\n    // This node should render if it is a root node or if all of its ancestors are expanded.\n    const parent = this.getParentNode(node);\n    return !parent || (!!this.tree?.isExpanded(parent) && this.shouldRender(parent));\n  }\n}\n","<cdk-tree #tree [dataSource]=\"dataSource\" [childrenAccessor]=\"childrenAccessor\">\n  <!-- This is the tree node template for leaf nodes -->\n  <cdk-nested-tree-node #treeNode=\"cdkNestedTreeNode\" *cdkTreeNodeDef=\"let node\"\n      class=\"example-tree-node\">\n    <!-- use a disabled button to provide padding for tree leaf -->\n    <button mat-icon-button disabled></button>\n    {{node.name}}\n  </cdk-nested-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <cdk-nested-tree-node #treeNode=\"cdkNestedTreeNode\"\n    *cdkTreeNodeDef=\"let node; when: hasChild\"\n    [cdkTreeNodeTypeaheadLabel]=\"node.name\"\n    isExpandable\n    class=\"example-tree-node\">\n    <button\n      mat-icon-button\n      class=\"example-toggle\"\n      [attr.aria-label]=\"'Toggle ' + node.name\"\n      cdkTreeNodeToggle>\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{tree.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n    <div [class.example-tree-invisible]=\"!tree.isExpanded(node)\">\n      <ng-container cdkTreeNodeOutlet></ng-container>\n    </div>\n  </cdk-nested-tree-node>\n</cdk-tree>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {ArrayDataSource} from '@angular/cdk/collections';\nimport {NestedTreeControl, CdkTreeModule} from '@angular/cdk/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\nconst TREE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}],\n  },\n  {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\n      },\n      {\n        name: 'Orange',\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\n      },\n    ],\n  },\n];\n\n/**\n * @title Tree with nested nodes\n */\n@Component({\n  selector: 'cdk-tree-nested-example',\n  templateUrl: 'cdk-tree-nested-example.html',\n  styleUrl: 'cdk-tree-nested-example.css',\n  standalone: true,\n  imports: [CdkTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkTreeNestedExample {\n  treeControl = new NestedTreeControl<FoodNode>(node => node.children);\n  dataSource = new ArrayDataSource(TREE_DATA);\n\n  hasChild = (_: number, node: FoodNode) => !!node.children && node.children.length > 0;\n}\n","<cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <!-- This is the tree node template for leaf nodes -->\n  <cdk-nested-tree-node #treeNode=\"cdkNestedTreeNode\" *cdkTreeNodeDef=\"let node\"\n      class=\"example-tree-node\">\n    <!-- use a disabled button to provide padding for tree leaf -->\n    <button mat-icon-button disabled></button>\n    {{node.name}}\n  </cdk-nested-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <cdk-nested-tree-node #treeNode=\"cdkNestedTreeNode\"\n    [cdkTreeNodeTypeaheadLabel]=\"node.name\"\n    *cdkTreeNodeDef=\"let node; when: hasChild\"\n    isExpandable\n    class=\"example-tree-node\">\n    <button\n      mat-icon-button\n      class=\"example-toggle\"\n      [attr.aria-label]=\"'Toggle ' + node.name\"\n      cdkTreeNodeToggle>\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n    <div [class.example-tree-invisible]=\"!treeControl.isExpanded(node)\">\n      <ng-container cdkTreeNodeOutlet></ng-container>\n    </div>\n  </cdk-nested-tree-node>\n</cdk-tree>\n","import {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {BehaviorSubject, Observable, combineLatest, of as observableOf} from 'rxjs';\nimport {delay, map, shareReplay} from 'rxjs/operators';\n\ninterface BackendData {\n  id: string;\n  name: string;\n  parent?: string;\n  children?: string[];\n}\n\nconst TREE_DATA: Map<string, BackendData> = new Map(\n  [\n    {\n      id: '1',\n      name: 'Fruit',\n      children: ['1-1', '1-2', '1-3'],\n    },\n    {id: '1-1', name: 'Apple', parent: '1'},\n    {id: '1-2', name: 'Banana', parent: '1'},\n    {id: '1-3', name: 'Fruit Loops', parent: '1'},\n    {\n      id: '2',\n      name: 'Vegetables',\n      children: ['2-1', '2-2'],\n    },\n    {\n      id: '2-1',\n      name: 'Green',\n      parent: '2',\n      children: ['2-1-1', '2-1-2'],\n    },\n    {\n      id: '2-2',\n      name: 'Orange',\n      parent: '2',\n      children: ['2-2-1', '2-2-2'],\n    },\n    {id: '2-1-1', name: 'Broccoli', parent: '2-1'},\n    {id: '2-1-2', name: 'Brussel sprouts', parent: '2-1'},\n    {id: '2-2-1', name: 'Pumpkins', parent: '2-2'},\n    {id: '2-2-2', name: 'Carrots', parent: '2-2'},\n  ].map(datum => [datum.id, datum]),\n);\n\nclass FakeDataBackend {\n  private _getRandomDelayTime() {\n    // anywhere from 100 to 500ms.\n    return Math.floor(Math.random() * 400) + 100;\n  }\n\n  getChildren(id: string): Observable<BackendData[]> {\n    // first, find the specified ID in our tree\n    const item = TREE_DATA.get(id);\n    const children = item?.children ?? [];\n\n    return observableOf(children.map(childId => TREE_DATA.get(childId)!)).pipe(\n      delay(this._getRandomDelayTime()),\n    );\n  }\n\n  getRoots(): Observable<BackendData[]> {\n    return observableOf([...TREE_DATA.values()].filter(datum => !datum.parent)).pipe(\n      delay(this._getRandomDelayTime()),\n    );\n  }\n}\n\ntype LoadingState = 'INIT' | 'LOADING' | 'LOADED';\n\ninterface RawData {\n  id: string;\n  name: string;\n  parentId?: string;\n  childrenIds?: string[];\n  childrenLoading: LoadingState;\n}\n\nclass TransformedData {\n  constructor(public raw: RawData) {}\n\n  areChildrenLoading() {\n    return this.raw.childrenLoading === 'LOADING';\n  }\n\n  isExpandable() {\n    return (\n      (this.raw.childrenLoading === 'INIT' || this.raw.childrenLoading === 'LOADED') &&\n      !!this.raw.childrenIds?.length\n    );\n  }\n\n  isLeaf() {\n    return !this.isExpandable() && !this.areChildrenLoading();\n  }\n}\n\ninterface State {\n  rootIds: string[];\n  rootsLoading: LoadingState;\n  allData: Map<string, RawData>;\n  dataLoading: Map<string, LoadingState>;\n}\n\ntype ObservedValueOf<T> = T extends Observable<infer U> ? U : never;\n\ntype ObservedValuesOf<T extends readonly Observable<unknown>[]> = {\n  [K in keyof T]: ObservedValueOf<T[K]>;\n};\n\ntype TransformFn<T extends readonly Observable<unknown>[], U> = (\n  ...args: [...ObservedValuesOf<T>, State]\n) => U;\n\nclass ComplexDataStore {\n  private readonly _backend = new FakeDataBackend();\n\n  private _state = new BehaviorSubject<State>({\n    rootIds: [],\n    rootsLoading: 'INIT',\n    allData: new Map(),\n    dataLoading: new Map(),\n  });\n\n  private readonly _rootIds = this.select(state => state.rootIds);\n  private readonly _allData = this.select(state => state.allData);\n  private readonly _loadingData = this.select(state => state.dataLoading);\n  private readonly _rootsLoadingState = this.select(state => state.rootsLoading);\n  readonly areRootsLoading = this.select(\n    this._rootIds,\n    this._loadingData,\n    this._rootsLoadingState,\n    (rootIds, loading, rootsLoading) =>\n      rootsLoading !== 'LOADED' || rootIds.some(id => loading.get(id) !== 'LOADED'),\n  );\n  readonly roots = this.select(\n    this.areRootsLoading,\n    this._rootIds,\n    this._allData,\n    (rootsLoading, rootIds, data) => {\n      if (rootsLoading) {\n        return [];\n      }\n      return this._getDataByIds(rootIds, data);\n    },\n  );\n\n  getChildren(parentId: string) {\n    return this.select(this._allData, this._loadingData, (data, loading) => {\n      const parentData = data.get(parentId);\n      if (parentData?.childrenLoading !== 'LOADED') {\n        return [];\n      }\n      const childIds = parentData.childrenIds ?? [];\n      if (childIds.some(id => loading.get(id) !== 'LOADED')) {\n        return [];\n      }\n      return this._getDataByIds(childIds, data);\n    });\n  }\n\n  loadRoots() {\n    this._setRootsLoading();\n    this._backend.getRoots().subscribe(roots => {\n      this._setRoots(roots);\n    });\n  }\n\n  loadChildren(parentId: string) {\n    this._setChildrenLoading(parentId);\n    this._backend.getChildren(parentId).subscribe(children => {\n      this._addLoadedData(parentId, children);\n    });\n  }\n\n  private _setRootsLoading() {\n    this._state.next({\n      ...this._state.value,\n      rootsLoading: 'LOADING',\n    });\n  }\n\n  private _setRoots(roots: BackendData[]) {\n    const currentState = this._state.value;\n\n    this._state.next({\n      ...currentState,\n      rootIds: roots.map(root => root.id),\n      rootsLoading: 'LOADED',\n      ...this._addData(currentState, roots),\n    });\n  }\n\n  private _setChildrenLoading(parentId: string) {\n    const currentState = this._state.value;\n    const parentData = currentState.allData.get(parentId);\n\n    this._state.next({\n      ...currentState,\n      allData: new Map([\n        ...currentState.allData,\n        ...(parentData ? ([[parentId, {...parentData, childrenLoading: 'LOADING'}]] as const) : []),\n      ]),\n      dataLoading: new Map([\n        ...currentState.dataLoading,\n        ...(parentData?.childrenIds?.map(childId => [childId, 'LOADING'] as const) ?? []),\n      ]),\n    });\n  }\n\n  private _addLoadedData(parentId: string, childData: BackendData[]) {\n    const currentState = this._state.value;\n\n    this._state.next({\n      ...currentState,\n      ...this._addData(currentState, childData, parentId),\n    });\n  }\n\n  private _addData(\n    {allData, dataLoading}: State,\n    data: BackendData[],\n    parentId?: string,\n  ): Pick<State, 'allData' | 'dataLoading'> {\n    const parentData = parentId && allData.get(parentId);\n    const allChildren = data.flatMap(datum => datum.children ?? []);\n    return {\n      allData: new Map([\n        ...allData,\n        ...data.map(datum => {\n          return [\n            datum.id,\n            {\n              id: datum.id,\n              name: datum.name,\n              parentId,\n              childrenIds: datum.children,\n              childrenLoading: 'INIT',\n            },\n          ] as const;\n        }),\n        ...(parentData ? ([[parentId, {...parentData, childrenLoading: 'LOADED'}]] as const) : []),\n      ]),\n      dataLoading: new Map([\n        ...dataLoading,\n        ...data.map(datum => [datum.id, 'LOADED'] as const),\n        ...allChildren.map(childId => [childId, 'INIT'] as const),\n      ]),\n    };\n  }\n\n  private _getDataByIds(ids: string[], data: State['allData']) {\n    return ids\n      .map(id => data.get(id))\n      .filter(<T>(item: T | undefined): item is T => !!item)\n      .map(datum => new TransformedData(datum));\n  }\n\n  select<T extends readonly Observable<unknown>[], U>(\n    ...sourcesAndTransform: [...T, TransformFn<T, U>]\n  ) {\n    const sources = sourcesAndTransform.slice(0, -1) as unknown as T;\n    const transformFn = sourcesAndTransform[sourcesAndTransform.length - 1] as TransformFn<T, U>;\n\n    return combineLatest([...sources, this._state]).pipe(\n      map(args => transformFn(...(args as [...ObservedValuesOf<T>, State]))),\n      shareReplay({refCount: true, bufferSize: 1}),\n    );\n  }\n}\n\n/**\n * @title Complex example making use of the redux pattern.\n */\n@Component({\n  selector: 'cdk-tree-complex-example',\n  templateUrl: 'cdk-tree-complex-example.html',\n  styleUrls: ['cdk-tree-complex-example.css'],\n  standalone: true,\n  imports: [CdkTreeModule, MatButtonModule, MatIconModule, CommonModule, MatProgressSpinnerModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkTreeComplexExample implements OnInit {\n  private readonly _dataStore = new ComplexDataStore();\n\n  areRootsLoading = this._dataStore.areRootsLoading;\n  roots = this._dataStore.roots;\n\n  getChildren = (node: TransformedData) => this._dataStore.getChildren(node.raw.id);\n  trackBy = (index: number, node: TransformedData) => this.expansionKey(node);\n  expansionKey = (node: TransformedData) => node.raw.id;\n\n  ngOnInit() {\n    this._dataStore.loadRoots();\n  }\n\n  onExpand(node: TransformedData, expanded: boolean) {\n    if (expanded) {\n      // Only perform a load on expansion.\n      this._dataStore.loadChildren(node.raw.id);\n    }\n  }\n}\n","@if (areRootsLoading | async) {\n  <mat-spinner></mat-spinner>\n} @else {\n  <cdk-tree\n      #tree\n      [dataSource]=\"roots\"\n      [childrenAccessor]=\"getChildren\"\n      [trackBy]=\"trackBy\"\n      [expansionKey]=\"expansionKey\">\n    <cdk-tree-node\n        *cdkTreeNodeDef=\"let node\"\n        cdkTreeNodePadding\n        [cdkTreeNodeTypeaheadLabel]=\"node.raw.name\"\n        [isExpandable]=\"node.isExpandable()\"\n        (expandedChange)=\"onExpand(node, $event)\">\n      <!-- Spinner when node is loading children; this replaces the expand button. -->\n      @if (node.areChildrenLoading()) {\n        <mat-spinner diameter=\"48\" mode=\"indeterminate\"></mat-spinner>\n      }\n\n      @if (!node.areChildrenLoading() && node.isExpandable()) {\n        <button\n            mat-icon-button\n            cdkTreeNodeToggle\n            [attr.aria-label]=\"'Toggle ' + node.raw.name\">\n          <mat-icon class=\"mat-icon-rtl-mirror\">\n            {{tree.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n          </mat-icon>\n        </button>\n      }\n\n      <!-- Spacer for leaf nodes -->\n      @if (node.isLeaf()) {\n        <div class=\"toggle-spacer\"></div>\n      }\n\n      <span>{{node.raw.name}}</span>\n    </cdk-tree-node>\n  </cdk-tree>\n}\n","import {ChangeDetectionStrategy, Component, QueryList} from '@angular/core';\nimport {ArrayDataSource} from '@angular/cdk/collections';\nimport {coerceObservable} from '@angular/cdk/coercion/private';\nimport {FlatTreeControl, CdkTreeModule} from '@angular/cdk/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {\n  TREE_KEY_MANAGER,\n  TreeKeyManagerFactory,\n  TreeKeyManagerItem,\n  TreeKeyManagerStrategy,\n} from '@angular/cdk/a11y';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  H,\n  HOME,\n  J,\n  K,\n  L,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  TAB,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {Subject, isObservable, Observable} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\nconst TREE_DATA: ExampleFlatNode[] = [\n  {\n    name: 'Fruit',\n    expandable: true,\n    level: 0,\n  },\n  {\n    name: 'Apple',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Banana',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Fruit loops',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Vegetables',\n    expandable: true,\n    level: 0,\n  },\n  {\n    name: 'Green',\n    expandable: true,\n    level: 1,\n  },\n  {\n    name: 'Broccoli',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Brussels sprouts',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Orange',\n    expandable: true,\n    level: 1,\n  },\n  {\n    name: 'Pumpkins',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Carrots',\n    expandable: false,\n    level: 2,\n  },\n];\n\n/** Flat node with expandable and level information */\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n  isExpanded?: boolean;\n}\n\n/**\n * This class manages keyboard events for trees. If you pass it a QueryList or other list of tree\n * items, it will set the active item, focus, handle expansion and typeahead correctly when\n * keyboard events occur.\n */\nexport class VimTreeKeyManager<T extends TreeKeyManagerItem> implements TreeKeyManagerStrategy<T> {\n  private _activeItemIndex = -1;\n  private _activeItem: T | null = null;\n\n  private _items: T[] = [];\n\n  private _hasInitialFocused = false;\n\n  private _initialFocus() {\n    if (this._hasInitialFocused) {\n      return;\n    }\n\n    if (!this._items.length) {\n      return;\n    }\n\n    this._focusFirstItem();\n\n    this._hasInitialFocused = true;\n  }\n\n  // TreeKeyManagerOptions not implemented.\n  constructor(items: Observable<T[]> | QueryList<T> | T[]) {\n    // We allow for the items to be an array or Observable because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (items instanceof QueryList) {\n      this._items = items.toArray();\n      items.changes.subscribe((newItems: QueryList<T>) => {\n        this._items = newItems.toArray();\n        this._updateActiveItemIndex(this._items);\n        this._initialFocus();\n      });\n    } else if (isObservable(items)) {\n      items.subscribe(newItems => {\n        this._items = newItems;\n        this._updateActiveItemIndex(newItems);\n        this._initialFocus();\n      });\n    } else {\n      this._items = items;\n      this._initialFocus();\n    }\n  }\n\n  destroy() {\n    this.change.complete();\n  }\n\n  /** Stream that emits any time the focused item changes. */\n  readonly change = new Subject<T | null>();\n\n  /**\n   * Handles a keyboard event on the tree.\n   * @param event Keyboard event that represents the user interaction with the tree.\n   */\n  onKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case TAB:\n        // Return early here, in order to allow Tab to actually tab out of the tree\n        return;\n\n      case DOWN_ARROW:\n      case J:\n        this._focusNextItem();\n        break;\n\n      case UP_ARROW:\n      case K:\n        this._focusPreviousItem();\n        break;\n\n      case RIGHT_ARROW:\n      case L:\n        this._expandCurrentItem();\n        break;\n\n      case LEFT_ARROW:\n      case H:\n        this._collapseCurrentItem();\n        break;\n\n      case HOME:\n        this._focusFirstItem();\n        break;\n\n      case END:\n        this._focusLastItem();\n        break;\n\n      case ENTER:\n      case SPACE:\n        this._activateCurrentItem();\n        break;\n    }\n  }\n\n  /** Index of the currently active item. */\n  getActiveItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n\n  /** The currently active item. */\n  getActiveItem(): T | null {\n    return this._activeItem;\n  }\n\n  /**\n   * Focus the provided item by index.\n   * @param index The index of the item to focus.\n   * @param options Additional focusing options.\n   */\n  focusItem(index: number, options?: {emitChangeEvent?: boolean}): void;\n  /**\n   * Focus the provided item.\n   * @param item The item to focus. Equality is determined via the trackBy function.\n   * @param options Additional focusing options.\n   */\n  focusItem(item: T, options?: {emitChangeEvent?: boolean}): void;\n  focusItem(itemOrIndex: number | T, options?: {emitChangeEvent?: boolean}): void;\n  focusItem(itemOrIndex: number | T, options: {emitChangeEvent?: boolean} = {}) {\n    // Set default options\n    options.emitChangeEvent ??= true;\n\n    let index =\n      typeof itemOrIndex === 'number'\n        ? itemOrIndex\n        : this._items.findIndex(item => item === itemOrIndex);\n    if (index < 0 || index >= this._items.length) {\n      return;\n    }\n    const activeItem = this._items[index];\n\n    // If we're just setting the same item, don't re-call activate or focus\n    if (this._activeItem !== null && activeItem === this._activeItem) {\n      return;\n    }\n\n    this._activeItem = activeItem ?? null;\n    this._activeItemIndex = index;\n\n    if (options.emitChangeEvent) {\n      // Emit to `change` stream as required by TreeKeyManagerStrategy interface.\n      this.change.next(this._activeItem);\n    }\n    this._activeItem?.focus();\n    this._activateCurrentItem();\n  }\n\n  private _updateActiveItemIndex(newItems: T[]) {\n    const activeItem = this._activeItem;\n    if (activeItem) {\n      const newIndex = newItems.findIndex(item => item === activeItem);\n\n      if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n        this._activeItemIndex = newIndex;\n      }\n    }\n  }\n\n  /** Focus the first available item. */\n  private _focusFirstItem(): void {\n    this.focusItem(this._findNextAvailableItemIndex(-1));\n  }\n\n  /** Focus the last available item. */\n  private _focusLastItem(): void {\n    this.focusItem(this._findPreviousAvailableItemIndex(this._items.length));\n  }\n\n  /** Focus the next available item. */\n  private _focusNextItem(): void {\n    this.focusItem(this._findNextAvailableItemIndex(this._activeItemIndex));\n  }\n\n  /** Focus the previous available item. */\n  private _focusPreviousItem(): void {\n    this.focusItem(this._findPreviousAvailableItemIndex(this._activeItemIndex));\n  }\n\n  //// Navigational methods\n  private _findNextAvailableItemIndex(startingIndex: number) {\n    if (startingIndex + 1 < this._items.length) {\n      return startingIndex + 1;\n    }\n    return startingIndex;\n  }\n\n  private _findPreviousAvailableItemIndex(startingIndex: number) {\n    if (startingIndex - 1 >= 0) {\n      return startingIndex - 1;\n    }\n    return startingIndex;\n  }\n\n  /**\n   * If the item is already expanded, we collapse the item. Otherwise, we will focus the parent.\n   */\n  private _collapseCurrentItem() {\n    if (!this._activeItem) {\n      return;\n    }\n\n    if (this._isCurrentItemExpanded()) {\n      this._activeItem.collapse();\n    } else {\n      const parent = this._activeItem.getParent();\n      if (!parent) {\n        return;\n      }\n      this.focusItem(parent as T);\n    }\n  }\n\n  /**\n   * If the item is already collapsed, we expand the item. Otherwise, we will focus the first child.\n   */\n  private _expandCurrentItem() {\n    if (!this._activeItem) {\n      return;\n    }\n\n    if (!this._isCurrentItemExpanded()) {\n      this._activeItem.expand();\n    } else {\n      coerceObservable(this._activeItem.getChildren())\n        .pipe(take(1))\n        .subscribe(children => {\n          const firstChild = children[0];\n          if (!firstChild) {\n            return;\n          }\n          this.focusItem(firstChild as T);\n        });\n    }\n  }\n\n  private _isCurrentItemExpanded() {\n    if (!this._activeItem) {\n      return false;\n    }\n    return typeof this._activeItem.isExpanded === 'boolean'\n      ? this._activeItem.isExpanded\n      : this._activeItem.isExpanded();\n  }\n\n  private _activateCurrentItem() {\n    this._activeItem?.activate();\n  }\n}\n\nfunction VimTreeKeyManagerFactory<T extends TreeKeyManagerItem>(): TreeKeyManagerFactory<T> {\n  return items => new VimTreeKeyManager(items);\n}\n\nconst VIM_TREE_KEY_MANAGER_PROVIDER = {\n  provide: TREE_KEY_MANAGER,\n  useFactory: VimTreeKeyManagerFactory,\n};\n\n/**\n * @title Tree with vim keyboard commands.\n */\n@Component({\n  selector: 'cdk-tree-custom-key-manager-example',\n  templateUrl: 'cdk-tree-custom-key-manager-example.html',\n  styleUrls: ['cdk-tree-custom-key-manager-example.css'],\n  standalone: true,\n  imports: [CdkTreeModule, MatButtonModule, MatIconModule],\n  providers: [VIM_TREE_KEY_MANAGER_PROVIDER],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkTreeCustomKeyManagerExample {\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    node => node.level,\n    node => node.expandable,\n  );\n\n  dataSource = new ArrayDataSource(TREE_DATA);\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n\n  getParentNode(node: ExampleFlatNode) {\n    const nodeIndex = TREE_DATA.indexOf(node);\n\n    for (let i = nodeIndex - 1; i >= 0; i--) {\n      if (TREE_DATA[i].level === node.level - 1) {\n        return TREE_DATA[i];\n      }\n    }\n\n    return null;\n  }\n\n  shouldRender(node: ExampleFlatNode) {\n    let parent = this.getParentNode(node);\n    while (parent) {\n      if (!parent.isExpanded) {\n        return false;\n      }\n      parent = this.getParentNode(parent);\n    }\n    return true;\n  }\n}\n","<cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <!-- This is the tree node template for leaf nodes -->\n  <cdk-tree-node *cdkTreeNodeDef=\"let node\" cdkTreeNodePadding\n                 [style.display]=\"shouldRender(node) ? 'flex' : 'none'\"\n                 [isDisabled]=\"!shouldRender(node)\"\n                 class=\"example-tree-node\">\n    <!-- use a disabled button to provide padding for tree leaf -->\n    <button mat-icon-button disabled></button>\n    {{node.name}}\n  </cdk-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <cdk-tree-node *cdkTreeNodeDef=\"let node; when: hasChild\" cdkTreeNodePadding\n                 cdkTreeNodeToggle\n                 [cdkTreeNodeTypeaheadLabel]=\"node.name\"\n                 [style.display]=\"shouldRender(node) ? 'flex' : 'none'\"\n                 [isDisabled]=\"!shouldRender(node)\"\n                 (expandedChange)=\"node.isExpanded = $event\"\n                 class=\"example-tree-node\"\n                 tabindex=\"0\">\n    <button mat-icon-button cdkTreeNodeToggle\n            [attr.aria-label]=\"'Toggle ' + node.name\"\n            [style.visibility]=\"node.expandable ? 'visible' : 'hidden'\">\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n  </cdk-tree-node>\n</cdk-tree>\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["flattenNodes","TREE_DATA","observableOf"],"mappings":"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"}