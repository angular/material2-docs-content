{"version":3,"file":"tree.mjs","sources":["../../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-dynamic/tree-dynamic-example.ts","../../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-dynamic/tree-dynamic-example.html","../../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-flat-overview/tree-flat-overview-example.ts","../../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-flat-overview/tree-flat-overview-example.html","../../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-flat-child-accessor-overview/tree-flat-child-accessor-overview-example.ts","../../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-flat-child-accessor-overview/tree-flat-child-accessor-overview-example.html","../../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-harness/tree-harness-example.ts","../../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-harness/tree-harness-example.html","../../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-loadmore/tree-loadmore-example.ts","../../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-loadmore/tree-loadmore-example.html","../../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-nested-overview/tree-nested-overview-example.ts","../../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-nested-overview/tree-nested-overview-example.html","../../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-nested-child-accessor-overview/tree-nested-child-accessor-overview-example.ts","../../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-nested-child-accessor-overview/tree-nested-child-accessor-overview-example.html","../../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-legacy-keyboard-interface/tree-legacy-keyboard-interface-example.ts","../../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-legacy-keyboard-interface/tree-legacy-keyboard-interface-example.html"],"sourcesContent":["import {CollectionViewer, SelectionChange, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, Injectable, inject, signal} from '@angular/core';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatTreeModule} from '@angular/material/tree';\n\n/** Flat node with expandable and level information */\nclass DynamicFlatNode {\n  constructor(\n    public item: string,\n    public level = 1,\n    public expandable = false,\n    public isLoading = signal(false),\n  ) {}\n}\n\n/**\n * Database for dynamic data. When expanding a node in the tree, the data source will need to fetch\n * the descendants data from the database.\n */\n@Injectable({providedIn: 'root'})\nexport class DynamicDatabase {\n  dataMap = new Map<string, string[]>([\n    ['Fruits', ['Apple', 'Orange', 'Banana']],\n    ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n    ['Apple', ['Fuji', 'Macintosh']],\n    ['Onion', ['Yellow', 'White', 'Purple']],\n  ]);\n\n  rootLevelNodes: string[] = ['Fruits', 'Vegetables'];\n\n  /** Initial data from database */\n  initialData(): DynamicFlatNode[] {\n    return this.rootLevelNodes.map(name => new DynamicFlatNode(name, 0, true));\n  }\n\n  getChildren(node: string): string[] | undefined {\n    return this.dataMap.get(node);\n  }\n\n  isExpandable(node: string): boolean {\n    return this.dataMap.has(node);\n  }\n}\n/**\n * File database, it can build a tree structured Json object from string.\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\n * For a directory, it has filename and children (a list of files or directories).\n * The input will be a json object string, and the output is a list of `FileNode` with nested\n * structure.\n */\nexport class DynamicDataSource implements DataSource<DynamicFlatNode> {\n  dataChange = new BehaviorSubject<DynamicFlatNode[]>([]);\n\n  get data(): DynamicFlatNode[] {\n    return this.dataChange.value;\n  }\n  set data(value: DynamicFlatNode[]) {\n    this._treeControl.dataNodes = value;\n    this.dataChange.next(value);\n  }\n\n  constructor(\n    private _treeControl: FlatTreeControl<DynamicFlatNode>,\n    private _database: DynamicDatabase,\n  ) {}\n\n  connect(collectionViewer: CollectionViewer): Observable<DynamicFlatNode[]> {\n    this._treeControl.expansionModel.changed.subscribe(change => {\n      if (\n        (change as SelectionChange<DynamicFlatNode>).added ||\n        (change as SelectionChange<DynamicFlatNode>).removed\n      ) {\n        this.handleTreeControl(change as SelectionChange<DynamicFlatNode>);\n      }\n    });\n\n    return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\n  }\n\n  disconnect(collectionViewer: CollectionViewer): void {}\n\n  /** Handle expand/collapse behaviors */\n  handleTreeControl(change: SelectionChange<DynamicFlatNode>) {\n    if (change.added) {\n      change.added.forEach(node => this.toggleNode(node, true));\n    }\n    if (change.removed) {\n      change.removed\n        .slice()\n        .reverse()\n        .forEach(node => this.toggleNode(node, false));\n    }\n  }\n\n  /**\n   * Toggle the node, remove from display list\n   */\n  toggleNode(node: DynamicFlatNode, expand: boolean) {\n    const children = this._database.getChildren(node.item);\n    const index = this.data.indexOf(node);\n    if (!children || index < 0) {\n      // If no children, or cannot find the node, no op\n      return;\n    }\n\n    node.isLoading.set(true);\n\n    setTimeout(() => {\n      if (expand) {\n        const nodes = children.map(\n          name => new DynamicFlatNode(name, node.level + 1, this._database.isExpandable(name)),\n        );\n        this.data.splice(index + 1, 0, ...nodes);\n      } else {\n        let count = 0;\n        for (\n          let i = index + 1;\n          i < this.data.length && this.data[i].level > node.level;\n          i++, count++\n        ) {}\n        this.data.splice(index + 1, count);\n      }\n\n      // notify the change\n      this.dataChange.next(this.data);\n      node.isLoading.set(false);\n    }, 1000);\n  }\n}\n\n/**\n * @title Tree with dynamic data\n */\n@Component({\n  selector: 'tree-dynamic-example',\n  templateUrl: 'tree-dynamic-example.html',\n  styleUrl: 'tree-dynamic-example.css',\n  imports: [MatTreeModule, MatButtonModule, MatIconModule, MatProgressBarModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeDynamicExample {\n  constructor() {\n    const database = inject(DynamicDatabase);\n\n    this.treeControl = new FlatTreeControl<DynamicFlatNode>(this.getLevel, this.isExpandable);\n    this.dataSource = new DynamicDataSource(this.treeControl, database);\n\n    this.dataSource.data = database.initialData();\n  }\n\n  treeControl: FlatTreeControl<DynamicFlatNode>;\n\n  dataSource: DynamicDataSource;\n\n  getLevel = (node: DynamicFlatNode) => node.level;\n\n  isExpandable = (node: DynamicFlatNode) => node.expandable;\n\n  hasChild = (_: number, _nodeData: DynamicFlatNode) => _nodeData.expandable;\n}\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n    <button matIconButton disabled></button>\n    {{node.item}}\n  </mat-tree-node>\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding matTreeNodeToggle\n                [cdkTreeNodeTypeaheadLabel]=\"node.item\">\n    <button matIconButton\n            [attr.aria-label]=\"'Toggle ' + node.item\" matTreeNodeToggle>\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.item}}\n    @if (node.isLoading()) {\n      <mat-progress-bar\n          mode=\"indeterminate\"\n          class=\"example-tree-progress-bar\"></mat-progress-bar>\n    }\n  </mat-tree-node>\n</mat-tree>\n","import {FlatTreeControl} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule} from '@angular/material/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\n/** Flat node with expandable and level information */\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\n/**\n * @title Tree with flat nodes\n */\n@Component({\n  selector: 'tree-flat-overview-example',\n  templateUrl: 'tree-flat-overview-example.html',\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeFlatOverviewExample {\n  private _transformer = (node: FoodNode, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      name: node.name,\n      level: level,\n    };\n  };\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    node => node.level,\n    node => node.expandable,\n  );\n\n  treeFlattener = new MatTreeFlattener(\n    this._transformer,\n    node => node.level,\n    node => node.expandable,\n    node => node.children,\n  );\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  constructor() {\n    this.dataSource.data = EXAMPLE_DATA;\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n}\n\nconst EXAMPLE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}],\n  },\n  {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\n      },\n      {\n        name: 'Orange',\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\n      },\n    ],\n  },\n];\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <!-- This is the tree node template for leaf nodes -->\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n    <!-- use a disabled button to provide padding for tree leaf -->\n    <button matIconButton disabled></button>\n    {{node.name}}\n  </mat-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding matTreeNodeToggle\n                 [cdkTreeNodeTypeaheadLabel]=\"node.name\">\n    <button matIconButton matTreeNodeToggle\n            [attr.aria-label]=\"'Toggle ' + node.name\">\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n  </mat-tree-node>\n</mat-tree>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {MatTreeModule} from '@angular/material/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\n/**\n * @title Tree with flat nodes (childrenAccessor)\n */\n@Component({\n  selector: 'tree-flat-child-accessor-overview-example',\n  templateUrl: 'tree-flat-child-accessor-overview-example.html',\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeFlatChildAccessorOverviewExample {\n  dataSource = EXAMPLE_DATA;\n\n  childrenAccessor = (node: FoodNode) => node.children ?? [];\n\n  hasChild = (_: number, node: FoodNode) => !!node.children && node.children.length > 0;\n}\n\nconst EXAMPLE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}],\n  },\n  {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\n      },\n      {\n        name: 'Orange',\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\n      },\n    ],\n  },\n];\n","<mat-tree #tree [dataSource]=\"dataSource\" [childrenAccessor]=\"childrenAccessor\">\n  <!-- This is the tree node template for leaf nodes -->\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n    <!-- use a disabled button to provide padding for tree leaf -->\n    <button matIconButton disabled></button>\n    {{node.name}}\n  </mat-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding matTreeNodeToggle\n                 [cdkTreeNodeTypeaheadLabel]=\"node.name\">\n    <button matIconButton matTreeNodeToggle\n            [attr.aria-label]=\"'Toggle ' + node.name\">\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{tree.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n  </mat-tree-node>\n</mat-tree>\n","import {FlatTreeControl} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule} from '@angular/material/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\ninterface Node {\n  name: string;\n  children?: Node[];\n}\n\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\n/**\n * @title Testing with MatTreeHarness\n */\n@Component({\n  selector: 'tree-harness-example',\n  templateUrl: 'tree-harness-example.html',\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeHarnessExample {\n  private _transformer = (node: Node, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      name: node.name,\n      level: level,\n    };\n  };\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    node => node.level,\n    node => node.expandable,\n  );\n\n  treeFlattener = new MatTreeFlattener(\n    this._transformer,\n    node => node.level,\n    node => node.expandable,\n    node => node.children,\n  );\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  constructor() {\n    this.dataSource.data = EXAMPLE_DATA;\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n}\n\nconst EXAMPLE_DATA: Node[] = [\n  {\n    name: 'Flat Group 1',\n    children: [{name: 'Flat Leaf 1.1'}, {name: 'Flat Leaf 1.2'}, {name: 'Flat Leaf 1.3'}],\n  },\n  {\n    name: 'Flat Group 2',\n    children: [\n      {\n        name: 'Flat Group 2.1',\n        children: [{name: 'Flat Leaf 2.1.1'}, {name: 'Flat Leaf 2.1.2'}, {name: 'Flat Leaf 2.1.3'}],\n      },\n    ],\n  },\n];\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <!-- This is the tree node template for leaf nodes -->\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n    <!-- use a disabled button to provide padding for tree leaf -->\n    <button matIconButton disabled></button>\n    {{node.name}}\n  </mat-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding matTreeNodeToggle\n                 [cdkTreeNodeTypeaheadLabel]=\"node.name\">\n    <button matIconButton matTreeNodeToggle\n            [attr.aria-label]=\"'Toggle ' + node.name\">\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n  </mat-tree-node>\n</mat-tree>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, Injectable, inject} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule} from '@angular/material/tree';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\n\nlet loadMoreId = 1;\n\n/** Nested node */\nclass NestedNode {\n  childrenChange = new BehaviorSubject<NestedNode[]>([]);\n\n  get children(): NestedNode[] {\n    return this.childrenChange.value;\n  }\n\n  constructor(\n    public name: string,\n    public hasChildren = false,\n    public parent: string | null = null,\n    public isLoadMore = false,\n  ) {}\n}\n\n/** Flat node with expandable and level information */\nexport class FlatNode {\n  constructor(\n    public name: string,\n    public level = 1,\n    public expandable = false,\n    public parent: string | null = null,\n    public isLoadMore = false,\n  ) {}\n}\n\n/** Number of nodes loaded at a time */\nconst batchSize = 3;\n\n/**\n * A database that only load part of the data initially. After user clicks on the `Load more`\n * button, more data will be loaded.\n */\n@Injectable()\nexport class LoadmoreDatabase {\n  /** Map of node name to node */\n  nodes = new Map<string, NestedNode>();\n\n  dataChange = new BehaviorSubject<NestedNode[]>([]);\n\n  /** Example data */\n  rootNodes: string[] = ['Vegetables', 'Fruits'];\n  childMap = new Map<string, string[]>([\n    ['Fruits', ['Apple', 'Orange', 'Banana']],\n    ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n    [\n      'Apple',\n      [\n        'Gala',\n        'Braeburn',\n        'Fuji',\n        'Macintosh',\n        'Golden Delicious',\n        'Red Delicious',\n        'Empire',\n        'Granny Smith',\n        'Cameo',\n        'Baldwin',\n        'Jonagold',\n      ],\n    ],\n    ['Onion', ['Yellow', 'White', 'Purple', 'Green', 'Shallot', 'Sweet', 'Red', 'Leek']],\n  ]);\n\n  initialize() {\n    const data = this.rootNodes.map(name => this._generateNode(name, null));\n    this.dataChange.next(data);\n  }\n\n  /** Expand a node whose children are not loaded */\n  loadChildren(name: string, onlyFirstTime = false) {\n    if (!this.nodes.has(name) || !this.childMap.has(name)) {\n      return;\n    }\n    const parent = this.nodes.get(name)!;\n    const children = this.childMap.get(name)!;\n\n    if (onlyFirstTime && parent.children!.length > 0) {\n      return;\n    }\n\n    const newChildrenNumber = parent.children!.length + batchSize;\n    const nodes = children\n      .slice(0, newChildrenNumber)\n      .map(name => this._generateNode(name, parent.name));\n    if (newChildrenNumber < children.length) {\n      // Need a new \"Load More\" node\n      nodes.push(new NestedNode(`LOAD_MORE-${loadMoreId++}`, false, name, true));\n    }\n\n    parent.childrenChange.next(nodes);\n    this.dataChange.next(this.dataChange.value);\n  }\n\n  private _generateNode(name: string, parent: string | null): NestedNode {\n    if (!this.nodes.has(name)) {\n      this.nodes.set(name, new NestedNode(name, this.childMap.has(name), parent));\n    }\n\n    return this.nodes.get(name)!;\n  }\n}\n\n/**\n * @title Tree with partially loaded data\n */\n@Component({\n  selector: 'tree-loadmore-example',\n  templateUrl: 'tree-loadmore-example.html',\n  styleUrl: 'tree-loadmore-example.css',\n  providers: [LoadmoreDatabase],\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeLoadmoreExample {\n  private _database = inject(LoadmoreDatabase);\n\n  nodeMap = new Map<string, FlatNode>();\n  treeControl: FlatTreeControl<FlatNode>;\n  treeFlattener: MatTreeFlattener<NestedNode, FlatNode>;\n  // Flat tree data source\n  dataSource: MatTreeFlatDataSource<NestedNode, FlatNode>;\n\n  constructor() {\n    const _database = this._database;\n\n    this.treeFlattener = new MatTreeFlattener(\n      this.transformer,\n      this.getLevel,\n      this.isExpandable,\n      this.getChildren,\n    );\n\n    // TODO(#27626): Remove treeControl. Adopt either levelAccessor or childrenAccessor.\n    this.treeControl = new FlatTreeControl<FlatNode>(this.getLevel, this.isExpandable);\n\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n    _database.dataChange.subscribe(data => {\n      this.dataSource.data = data;\n    });\n\n    _database.initialize();\n  }\n\n  getChildren = (node: NestedNode): Observable<NestedNode[]> => node.childrenChange;\n\n  transformer = (node: NestedNode, level: number) => {\n    const existingNode = this.nodeMap.get(node.name);\n\n    if (existingNode) {\n      return existingNode;\n    }\n\n    const newNode = new FlatNode(node.name, level, node.hasChildren, node.parent, node.isLoadMore);\n    this.nodeMap.set(node.name, newNode);\n    return newNode;\n  };\n\n  getLevel = (node: FlatNode) => node.level;\n\n  isExpandable = (node: FlatNode) => node.expandable;\n\n  hasChild = (_: number, node: FlatNode) => node.expandable;\n\n  isLoadMore = (_: number, node: FlatNode) => node.isLoadMore;\n\n  loadChildren(node: FlatNode) {\n    this._database.loadChildren(node.name, true);\n  }\n\n  /** Load more nodes when clicking on \"Load more\" node. */\n  loadOnClick(event: MouseEvent, node: FlatNode) {\n    this._loadSiblings(event.target as HTMLElement, node);\n  }\n\n  /** Load more nodes on keyboardpress when focused on \"Load more\" node */\n  loadOnKeypress(event: KeyboardEvent, node: FlatNode) {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._loadSiblings(event.target as HTMLElement, node);\n    }\n  }\n\n  private _loadSiblings(nodeElement: HTMLElement, node: FlatNode) {\n    if (node.parent) {\n      // Store a reference to the sibling of the \"Load More\" node before it is removed from the DOM\n      const previousSibling = nodeElement.previousElementSibling;\n\n      // Synchronously load data.\n      this._database.loadChildren(node.parent);\n\n      const focusDesination = previousSibling?.nextElementSibling || previousSibling;\n\n      if (focusDesination) {\n        // Restore focus.\n        (focusDesination as HTMLElement).focus();\n      }\n    }\n  }\n}\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <!-- Leaf node -->\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n    <button matIconButton disabled></button>\n    {{node.name}}\n  </mat-tree-node>\n\n  <!-- expandable node -->\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding matTreeNodeToggle\n                 (expandedChange)=\"loadChildren(node)\" [cdkTreeNodeTypeaheadLabel]=\"node.name\">\n    <button matIconButton\n            [attr.aria-label]=\"'Toggle ' + node.name\"\n            matTreeNodeToggle>\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n  </mat-tree-node>\n\n  <mat-tree-node class=\"example-load-more\" *matTreeNodeDef=\"let node; when: isLoadMore\"\n    role=\"treeitem\" (click)=\"loadOnClick($event, node)\"\n    (keydown)=\"loadOnKeypress($event, node)\">\n    Load more of {{node.parent}}...\n  </mat-tree-node>\n</mat-tree>\n","import {NestedTreeControl} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {MatTreeNestedDataSource, MatTreeModule} from '@angular/material/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\n/**\n * @title Tree with nested nodes\n */\n@Component({\n  selector: 'tree-nested-overview-example',\n  templateUrl: 'tree-nested-overview-example.html',\n  styleUrl: 'tree-nested-overview-example.css',\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeNestedOverviewExample {\n  treeControl = new NestedTreeControl<FoodNode>(node => node.children);\n  dataSource = new MatTreeNestedDataSource<FoodNode>();\n\n  constructor() {\n    this.dataSource.data = EXAMPLE_DATA;\n  }\n\n  hasChild = (_: number, node: FoodNode) => !!node.children && node.children.length > 0;\n}\n\nconst EXAMPLE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}],\n  },\n  {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\n      },\n      {\n        name: 'Orange',\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\n      },\n    ],\n  },\n];\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" class=\"example-tree\">\n  <!-- This is the tree node template for leaf nodes -->\n  <!-- There is inline padding applied to this node using styles.\n    This padding value depends on the matIconButton width. -->\n  <mat-nested-tree-node *matTreeNodeDef=\"let node\">\n    {{node.name}}\n  </mat-nested-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <mat-nested-tree-node\n      *matTreeNodeDef=\"let node; when: hasChild\"\n      matTreeNodeToggle [cdkTreeNodeTypeaheadLabel]=\"node.name\">\n    <div class=\"mat-tree-node\">\n      <button matIconButton matTreeNodeToggle\n              [attr.aria-label]=\"'Toggle ' + node.name\">\n        <mat-icon class=\"mat-icon-rtl-mirror\">\n          {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n        </mat-icon>\n      </button>\n      {{node.name}}\n    </div>\n    <!-- There is inline padding applied to this div using styles.\n        This padding value depends on the matIconButton width.  -->\n    <div [class.example-tree-invisible]=\"!treeControl.isExpanded(node)\"\n        role=\"group\">\n      <ng-container matTreeNodeOutlet></ng-container>\n    </div>\n  </mat-nested-tree-node>\n</mat-tree>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {MatTreeModule} from '@angular/material/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\n/**\n * @title Tree with nested nodes (childrenAccessor)\n */\n@Component({\n  selector: 'tree-nested-child-accessor-overview-example',\n  templateUrl: 'tree-nested-child-accessor-overview-example.html',\n  styleUrl: 'tree-nested-child-accessor-overview-example.css',\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeNestedChildAccessorOverviewExample {\n  childrenAccessor = (node: FoodNode) => node.children ?? [];\n\n  dataSource = EXAMPLE_DATA;\n\n  hasChild = (_: number, node: FoodNode) => !!node.children && node.children.length > 0;\n}\n\nconst EXAMPLE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}],\n  },\n  {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\n      },\n      {\n        name: 'Orange',\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\n      },\n    ],\n  },\n];\n","<mat-tree #tree [dataSource]=\"dataSource\" [childrenAccessor]=\"childrenAccessor\" class=\"example-tree\">\n  <!-- This is the tree node template for leaf nodes -->\n  <!-- There is inline padding applied to this node using styles.\n    This padding value depends on the matIconButton width. -->\n  <mat-nested-tree-node *matTreeNodeDef=\"let node\">\n    {{node.name}}\n  </mat-nested-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <mat-nested-tree-node\n      *matTreeNodeDef=\"let node; when: hasChild\"\n      matTreeNodeToggle [cdkTreeNodeTypeaheadLabel]=\"node.name\">\n    <div class=\"mat-tree-node\">\n      <button matIconButton matTreeNodeToggle\n              [attr.aria-label]=\"'Toggle ' + node.name\">\n        <mat-icon class=\"mat-icon-rtl-mirror\">\n          {{tree.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n        </mat-icon>\n      </button>\n      {{node.name}}\n    </div>\n    <!-- There is inline padding applied to this div using styles.\n        This padding value depends on the matIconButton width.  -->\n    <div [class.example-tree-invisible]=\"!tree.isExpanded(node)\"\n        role=\"group\">\n      <ng-container matTreeNodeOutlet></ng-container>\n    </div>\n  </mat-nested-tree-node>\n</mat-tree>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {ArrayDataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {NOOP_TREE_KEY_MANAGER_FACTORY_PROVIDER} from '@angular/cdk/a11y';\nimport {MatTreeModule} from '@angular/material/tree';\n\n/** Flat node with expandable and level information */\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\n/**\n * @title Tree with flat nodes\n */\n@Component({\n  selector: 'tree-legacy-keyboard-interface-example',\n  templateUrl: 'tree-legacy-keyboard-interface-example.html',\n  styleUrls: ['tree-legacy-keyboard-interface-example.css'],\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n  providers: [NOOP_TREE_KEY_MANAGER_FACTORY_PROVIDER],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeLegacyKeyboardInterfaceExample {\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    node => node.level,\n    node => node.expandable,\n  );\n\n  dataSource = new ArrayDataSource(EXAMPLE_DATA);\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n\n  getParentNode(node: ExampleFlatNode) {\n    const nodeIndex = EXAMPLE_DATA.indexOf(node);\n\n    for (let i = nodeIndex - 1; i >= 0; i--) {\n      if (EXAMPLE_DATA[i].level === node.level - 1) {\n        return EXAMPLE_DATA[i];\n      }\n    }\n\n    return null;\n  }\n}\n\nconst EXAMPLE_DATA: ExampleFlatNode[] = [\n  {\n    name: 'Fruit',\n    expandable: true,\n    level: 0,\n  },\n  {\n    name: 'Apple',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Banana',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Fruit loops',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Vegetables',\n    expandable: true,\n    level: 0,\n  },\n  {\n    name: 'Green',\n    expandable: true,\n    level: 1,\n  },\n  {\n    name: 'Broccoli',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Brussels sprouts',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Orange',\n    expandable: true,\n    level: 1,\n  },\n  {\n    name: 'Pumpkins',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Carrots',\n    expandable: false,\n    level: 2,\n  },\n];\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <!-- This is the tree node template for leaf nodes -->\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding\n                 class=\"example-tree-node\"\n                 tabindex=\"0\">\n    <!-- use a disabled button to provide padding for tree leaf -->\n    <button matIconButton disabled></button>\n    {{node.name}}\n  </mat-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding\n                 isExpandable\n                 [isExpanded]=\"true\"\n                 class=\"example-tree-node\"\n                 tabindex=\"0\">\n    {{node.name}}\n  </mat-tree-node>\n</mat-tree>\n"],"names":["i2","i4","EXAMPLE_DATA"],"mappings":"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"}