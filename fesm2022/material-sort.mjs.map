{"version":3,"file":"material-sort.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/sort/sort-overview/sort-overview-example.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/sort/sort-harness/sort-harness-example.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/sort/sort-custom-icon/sort-custom-icon-example.ts"],"sourcesContent":["import {Component} from '@angular/core';\nimport {Sort, MatSortModule} from '@angular/material/sort';\n\nexport interface Dessert {\n  calories: number;\n  carbs: number;\n  fat: number;\n  name: string;\n  protein: number;\n}\n\n/**\n * @title Sorting overview\n */\n@Component({\n  selector: 'sort-overview-example',\n  templateUrl: 'sort-overview-example.html',\n  styleUrl: 'sort-overview-example.css',\n  imports: [MatSortModule],\n})\nexport class SortOverviewExample {\n  desserts: Dessert[] = [\n    {name: 'Frozen yogurt', calories: 159, fat: 6, carbs: 24, protein: 4},\n    {name: 'Ice cream sandwich', calories: 237, fat: 9, carbs: 37, protein: 4},\n    {name: 'Eclair', calories: 262, fat: 16, carbs: 24, protein: 6},\n    {name: 'Cupcake', calories: 305, fat: 4, carbs: 67, protein: 4},\n    {name: 'Gingerbread', calories: 356, fat: 16, carbs: 49, protein: 4},\n  ];\n\n  sortedData: Dessert[];\n\n  constructor() {\n    this.sortedData = this.desserts.slice();\n  }\n\n  sortData(sort: Sort) {\n    const data = this.desserts.slice();\n    if (!sort.active || sort.direction === '') {\n      this.sortedData = data;\n      return;\n    }\n\n    this.sortedData = data.sort((a, b) => {\n      const isAsc = sort.direction === 'asc';\n      switch (sort.active) {\n        case 'name':\n          return compare(a.name, b.name, isAsc);\n        case 'calories':\n          return compare(a.calories, b.calories, isAsc);\n        case 'fat':\n          return compare(a.fat, b.fat, isAsc);\n        case 'carbs':\n          return compare(a.carbs, b.carbs, isAsc);\n        case 'protein':\n          return compare(a.protein, b.protein, isAsc);\n        default:\n          return 0;\n      }\n    });\n  }\n}\n\nfunction compare(a: number | string, b: number | string, isAsc: boolean) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n","import {Component, signal} from '@angular/core';\nimport {Sort, MatSortModule} from '@angular/material/sort';\n\n/**\n * @title Testing with MatSortHarness\n */\n@Component({\n  selector: 'sort-harness-example',\n  templateUrl: 'sort-harness-example.html',\n  imports: [MatSortModule],\n})\nexport class SortHarnessExample {\n  disableThirdHeader = signal(false);\n  desserts = [\n    {name: 'Frozen yogurt', calories: 159, fat: 6, carbs: 24, protein: 4},\n    {name: 'Ice cream sandwich', calories: 237, fat: 9, carbs: 37, protein: 4},\n    {name: 'Eclair', calories: 262, fat: 16, carbs: 24, protein: 6},\n    {name: 'Cupcake', calories: 305, fat: 4, carbs: 67, protein: 4},\n    {name: 'Gingerbread', calories: 356, fat: 16, carbs: 49, protein: 4},\n  ];\n\n  sortedData = this.desserts.slice();\n\n  sortData(sort: Sort) {\n    const data = this.desserts.slice();\n\n    if (!sort.active || sort.direction === '') {\n      this.sortedData = data;\n    } else {\n      this.sortedData = data.sort((a, b) => {\n        const aValue = (a as any)[sort.active];\n        const bValue = (b as any)[sort.active];\n        return (aValue < bValue ? -1 : 1) * (sort.direction === 'asc' ? 1 : -1);\n      });\n    }\n  }\n}\n","import {Component} from '@angular/core';\nimport {MatIcon} from '@angular/material/icon';\nimport {MatSortModule} from '@angular/material/sort';\n\n/**\n * @title Sort header with a custom icon\n */\n@Component({\n  selector: 'sort-custom-icon-example',\n  templateUrl: 'sort-custom-icon-example.html',\n  imports: [MatSortModule, MatIcon],\n})\nexport class SortCustomIconExample {}\n"],"names":["SortOverviewExample","name","calories","fat","carbs","protein","sortedData","constructor","desserts","slice","sortData","sort","data","active","direction","a","b","isAsc","compare","MatSortModule","kind","type","i1","MatSort","selector","inputs","outputs","exportAs","MatSortHeader","imports","template","styles","disableThirdHeader","signal","ngDevMode","debugName","deps","target","i0","ɵɵFactoryTarget","Component","isStandalone","ngImport","decorators","MatIcon"],"mappings":"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"}