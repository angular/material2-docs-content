{"version":3,"file":"material-tree.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-dynamic/tree-dynamic-example.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-flat-overview/tree-flat-overview-example.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-flat-child-accessor-overview/tree-flat-child-accessor-overview-example.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-harness/tree-harness-example.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-loadmore/tree-loadmore-example.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-nested-overview/tree-nested-overview-example.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-nested-child-accessor-overview/tree-nested-child-accessor-overview-example.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/components-examples/material/tree/tree-legacy-keyboard-interface/tree-legacy-keyboard-interface-example.ts"],"sourcesContent":["import {CollectionViewer, SelectionChange, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, Injectable, inject, signal} from '@angular/core';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatTreeModule} from '@angular/material/tree';\n\n/** Flat node with expandable and level information */\nclass DynamicFlatNode {\n  constructor(\n    public item: string,\n    public level = 1,\n    public expandable = false,\n    public isLoading = signal(false),\n  ) {}\n}\n\n/**\n * Database for dynamic data. When expanding a node in the tree, the data source will need to fetch\n * the descendants data from the database.\n */\n@Injectable({providedIn: 'root'})\nexport class DynamicDatabase {\n  dataMap = new Map<string, string[]>([\n    ['Fruits', ['Apple', 'Orange', 'Banana']],\n    ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n    ['Apple', ['Fuji', 'Macintosh']],\n    ['Onion', ['Yellow', 'White', 'Purple']],\n  ]);\n\n  rootLevelNodes: string[] = ['Fruits', 'Vegetables'];\n\n  /** Initial data from database */\n  initialData(): DynamicFlatNode[] {\n    return this.rootLevelNodes.map(name => new DynamicFlatNode(name, 0, true));\n  }\n\n  getChildren(node: string): string[] | undefined {\n    return this.dataMap.get(node);\n  }\n\n  isExpandable(node: string): boolean {\n    return this.dataMap.has(node);\n  }\n}\n/**\n * File database, it can build a tree structured Json object from string.\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\n * For a directory, it has filename and children (a list of files or directories).\n * The input will be a json object string, and the output is a list of `FileNode` with nested\n * structure.\n */\nexport class DynamicDataSource implements DataSource<DynamicFlatNode> {\n  dataChange = new BehaviorSubject<DynamicFlatNode[]>([]);\n\n  get data(): DynamicFlatNode[] {\n    return this.dataChange.value;\n  }\n  set data(value: DynamicFlatNode[]) {\n    this._treeControl.dataNodes = value;\n    this.dataChange.next(value);\n  }\n\n  constructor(\n    private _treeControl: FlatTreeControl<DynamicFlatNode>,\n    private _database: DynamicDatabase,\n  ) {}\n\n  connect(collectionViewer: CollectionViewer): Observable<DynamicFlatNode[]> {\n    this._treeControl.expansionModel.changed.subscribe(change => {\n      if (\n        (change as SelectionChange<DynamicFlatNode>).added ||\n        (change as SelectionChange<DynamicFlatNode>).removed\n      ) {\n        this.handleTreeControl(change as SelectionChange<DynamicFlatNode>);\n      }\n    });\n\n    return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\n  }\n\n  disconnect(collectionViewer: CollectionViewer): void {}\n\n  /** Handle expand/collapse behaviors */\n  handleTreeControl(change: SelectionChange<DynamicFlatNode>) {\n    if (change.added) {\n      change.added.forEach(node => this.toggleNode(node, true));\n    }\n    if (change.removed) {\n      change.removed\n        .slice()\n        .reverse()\n        .forEach(node => this.toggleNode(node, false));\n    }\n  }\n\n  /**\n   * Toggle the node, remove from display list\n   */\n  toggleNode(node: DynamicFlatNode, expand: boolean) {\n    const children = this._database.getChildren(node.item);\n    const index = this.data.indexOf(node);\n    if (!children || index < 0) {\n      // If no children, or cannot find the node, no op\n      return;\n    }\n\n    node.isLoading.set(true);\n\n    setTimeout(() => {\n      if (expand) {\n        const nodes = children.map(\n          name => new DynamicFlatNode(name, node.level + 1, this._database.isExpandable(name)),\n        );\n        this.data.splice(index + 1, 0, ...nodes);\n      } else {\n        let count = 0;\n        for (\n          let i = index + 1;\n          i < this.data.length && this.data[i].level > node.level;\n          i++, count++\n        ) {}\n        this.data.splice(index + 1, count);\n      }\n\n      // notify the change\n      this.dataChange.next(this.data);\n      node.isLoading.set(false);\n    }, 1000);\n  }\n}\n\n/**\n * @title Tree with dynamic data\n */\n@Component({\n  selector: 'tree-dynamic-example',\n  templateUrl: 'tree-dynamic-example.html',\n  styleUrl: 'tree-dynamic-example.css',\n  imports: [MatTreeModule, MatButtonModule, MatIconModule, MatProgressBarModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeDynamicExample {\n  constructor() {\n    const database = inject(DynamicDatabase);\n\n    this.treeControl = new FlatTreeControl<DynamicFlatNode>(this.getLevel, this.isExpandable);\n    this.dataSource = new DynamicDataSource(this.treeControl, database);\n\n    this.dataSource.data = database.initialData();\n  }\n\n  treeControl: FlatTreeControl<DynamicFlatNode>;\n\n  dataSource: DynamicDataSource;\n\n  getLevel = (node: DynamicFlatNode) => node.level;\n\n  isExpandable = (node: DynamicFlatNode) => node.expandable;\n\n  hasChild = (_: number, _nodeData: DynamicFlatNode) => _nodeData.expandable;\n}\n","import {FlatTreeControl} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule} from '@angular/material/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\n/** Flat node with expandable and level information */\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\n/**\n * @title Tree with flat nodes\n */\n@Component({\n  selector: 'tree-flat-overview-example',\n  templateUrl: 'tree-flat-overview-example.html',\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeFlatOverviewExample {\n  private _transformer = (node: FoodNode, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      name: node.name,\n      level: level,\n    };\n  };\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    node => node.level,\n    node => node.expandable,\n  );\n\n  treeFlattener = new MatTreeFlattener(\n    this._transformer,\n    node => node.level,\n    node => node.expandable,\n    node => node.children,\n  );\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  constructor() {\n    this.dataSource.data = EXAMPLE_DATA;\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n}\n\nconst EXAMPLE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}],\n  },\n  {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\n      },\n      {\n        name: 'Orange',\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\n      },\n    ],\n  },\n];\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {MatTreeModule} from '@angular/material/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\n/**\n * @title Tree with flat nodes (childrenAccessor)\n */\n@Component({\n  selector: 'tree-flat-child-accessor-overview-example',\n  templateUrl: 'tree-flat-child-accessor-overview-example.html',\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeFlatChildAccessorOverviewExample {\n  dataSource = EXAMPLE_DATA;\n\n  childrenAccessor = (node: FoodNode) => node.children ?? [];\n\n  hasChild = (_: number, node: FoodNode) => !!node.children && node.children.length > 0;\n}\n\nconst EXAMPLE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}],\n  },\n  {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\n      },\n      {\n        name: 'Orange',\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\n      },\n    ],\n  },\n];\n","import {FlatTreeControl} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule} from '@angular/material/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\ninterface Node {\n  name: string;\n  children?: Node[];\n}\n\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\n/**\n * @title Testing with MatTreeHarness\n */\n@Component({\n  selector: 'tree-harness-example',\n  templateUrl: 'tree-harness-example.html',\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeHarnessExample {\n  private _transformer = (node: Node, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      name: node.name,\n      level: level,\n    };\n  };\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    node => node.level,\n    node => node.expandable,\n  );\n\n  treeFlattener = new MatTreeFlattener(\n    this._transformer,\n    node => node.level,\n    node => node.expandable,\n    node => node.children,\n  );\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  constructor() {\n    this.dataSource.data = EXAMPLE_DATA;\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n}\n\nconst EXAMPLE_DATA: Node[] = [\n  {\n    name: 'Flat Group 1',\n    children: [{name: 'Flat Leaf 1.1'}, {name: 'Flat Leaf 1.2'}, {name: 'Flat Leaf 1.3'}],\n  },\n  {\n    name: 'Flat Group 2',\n    children: [\n      {\n        name: 'Flat Group 2.1',\n        children: [{name: 'Flat Leaf 2.1.1'}, {name: 'Flat Leaf 2.1.2'}, {name: 'Flat Leaf 2.1.3'}],\n      },\n    ],\n  },\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, Injectable, inject} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule} from '@angular/material/tree';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\n\nlet loadMoreId = 1;\n\n/** Nested node */\nclass NestedNode {\n  childrenChange = new BehaviorSubject<NestedNode[]>([]);\n\n  get children(): NestedNode[] {\n    return this.childrenChange.value;\n  }\n\n  constructor(\n    public name: string,\n    public hasChildren = false,\n    public parent: string | null = null,\n    public isLoadMore = false,\n  ) {}\n}\n\n/** Flat node with expandable and level information */\nexport class FlatNode {\n  constructor(\n    public name: string,\n    public level = 1,\n    public expandable = false,\n    public parent: string | null = null,\n    public isLoadMore = false,\n  ) {}\n}\n\n/** Number of nodes loaded at a time */\nconst batchSize = 3;\n\n/**\n * A database that only load part of the data initially. After user clicks on the `Load more`\n * button, more data will be loaded.\n */\n@Injectable()\nexport class LoadmoreDatabase {\n  /** Map of node name to node */\n  nodes = new Map<string, NestedNode>();\n\n  dataChange = new BehaviorSubject<NestedNode[]>([]);\n\n  /** Example data */\n  rootNodes: string[] = ['Vegetables', 'Fruits'];\n  childMap = new Map<string, string[]>([\n    ['Fruits', ['Apple', 'Orange', 'Banana']],\n    ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n    [\n      'Apple',\n      [\n        'Gala',\n        'Braeburn',\n        'Fuji',\n        'Macintosh',\n        'Golden Delicious',\n        'Red Delicious',\n        'Empire',\n        'Granny Smith',\n        'Cameo',\n        'Baldwin',\n        'Jonagold',\n      ],\n    ],\n    ['Onion', ['Yellow', 'White', 'Purple', 'Green', 'Shallot', 'Sweet', 'Red', 'Leek']],\n  ]);\n\n  initialize() {\n    const data = this.rootNodes.map(name => this._generateNode(name, null));\n    this.dataChange.next(data);\n  }\n\n  /** Expand a node whose children are not loaded */\n  loadChildren(name: string, onlyFirstTime = false) {\n    if (!this.nodes.has(name) || !this.childMap.has(name)) {\n      return;\n    }\n    const parent = this.nodes.get(name)!;\n    const children = this.childMap.get(name)!;\n\n    if (onlyFirstTime && parent.children!.length > 0) {\n      return;\n    }\n\n    const newChildrenNumber = parent.children!.length + batchSize;\n    const nodes = children\n      .slice(0, newChildrenNumber)\n      .map(name => this._generateNode(name, parent.name));\n    if (newChildrenNumber < children.length) {\n      // Need a new \"Load More\" node\n      nodes.push(new NestedNode(`LOAD_MORE-${loadMoreId++}`, false, name, true));\n    }\n\n    parent.childrenChange.next(nodes);\n    this.dataChange.next(this.dataChange.value);\n  }\n\n  private _generateNode(name: string, parent: string | null): NestedNode {\n    if (!this.nodes.has(name)) {\n      this.nodes.set(name, new NestedNode(name, this.childMap.has(name), parent));\n    }\n\n    return this.nodes.get(name)!;\n  }\n}\n\n/**\n * @title Tree with partially loaded data\n */\n@Component({\n  selector: 'tree-loadmore-example',\n  templateUrl: 'tree-loadmore-example.html',\n  styleUrl: 'tree-loadmore-example.css',\n  providers: [LoadmoreDatabase],\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeLoadmoreExample {\n  private _database = inject(LoadmoreDatabase);\n\n  nodeMap = new Map<string, FlatNode>();\n  treeControl: FlatTreeControl<FlatNode>;\n  treeFlattener: MatTreeFlattener<NestedNode, FlatNode>;\n  // Flat tree data source\n  dataSource: MatTreeFlatDataSource<NestedNode, FlatNode>;\n\n  constructor() {\n    const _database = this._database;\n\n    this.treeFlattener = new MatTreeFlattener(\n      this.transformer,\n      this.getLevel,\n      this.isExpandable,\n      this.getChildren,\n    );\n\n    // TODO(#27626): Remove treeControl. Adopt either levelAccessor or childrenAccessor.\n    this.treeControl = new FlatTreeControl<FlatNode>(this.getLevel, this.isExpandable);\n\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n    _database.dataChange.subscribe(data => {\n      this.dataSource.data = data;\n    });\n\n    _database.initialize();\n  }\n\n  getChildren = (node: NestedNode): Observable<NestedNode[]> => node.childrenChange;\n\n  transformer = (node: NestedNode, level: number) => {\n    const existingNode = this.nodeMap.get(node.name);\n\n    if (existingNode) {\n      return existingNode;\n    }\n\n    const newNode = new FlatNode(node.name, level, node.hasChildren, node.parent, node.isLoadMore);\n    this.nodeMap.set(node.name, newNode);\n    return newNode;\n  };\n\n  getLevel = (node: FlatNode) => node.level;\n\n  isExpandable = (node: FlatNode) => node.expandable;\n\n  hasChild = (_: number, node: FlatNode) => node.expandable;\n\n  isLoadMore = (_: number, node: FlatNode) => node.isLoadMore;\n\n  loadChildren(node: FlatNode) {\n    this._database.loadChildren(node.name, true);\n  }\n\n  /** Load more nodes when clicking on \"Load more\" node. */\n  loadOnClick(event: MouseEvent, node: FlatNode) {\n    this._loadSiblings(event.target as HTMLElement, node);\n  }\n\n  /** Load more nodes on keyboardpress when focused on \"Load more\" node */\n  loadOnKeypress(event: KeyboardEvent, node: FlatNode) {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._loadSiblings(event.target as HTMLElement, node);\n    }\n  }\n\n  private _loadSiblings(nodeElement: HTMLElement, node: FlatNode) {\n    if (node.parent) {\n      // Store a reference to the sibling of the \"Load More\" node before it is removed from the DOM\n      const previousSibling = nodeElement.previousElementSibling;\n\n      // Synchronously load data.\n      this._database.loadChildren(node.parent);\n\n      const focusDesination = previousSibling?.nextElementSibling || previousSibling;\n\n      if (focusDesination) {\n        // Restore focus.\n        (focusDesination as HTMLElement).focus();\n      }\n    }\n  }\n}\n","import {NestedTreeControl} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {MatTreeNestedDataSource, MatTreeModule} from '@angular/material/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\n/**\n * @title Tree with nested nodes\n */\n@Component({\n  selector: 'tree-nested-overview-example',\n  templateUrl: 'tree-nested-overview-example.html',\n  styleUrl: 'tree-nested-overview-example.css',\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeNestedOverviewExample {\n  treeControl = new NestedTreeControl<FoodNode>(node => node.children);\n  dataSource = new MatTreeNestedDataSource<FoodNode>();\n\n  constructor() {\n    this.dataSource.data = EXAMPLE_DATA;\n  }\n\n  hasChild = (_: number, node: FoodNode) => !!node.children && node.children.length > 0;\n}\n\nconst EXAMPLE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}],\n  },\n  {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\n      },\n      {\n        name: 'Orange',\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\n      },\n    ],\n  },\n];\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {MatTreeModule} from '@angular/material/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\n/**\n * @title Tree with nested nodes (childrenAccessor)\n */\n@Component({\n  selector: 'tree-nested-child-accessor-overview-example',\n  templateUrl: 'tree-nested-child-accessor-overview-example.html',\n  styleUrl: 'tree-nested-child-accessor-overview-example.css',\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeNestedChildAccessorOverviewExample {\n  childrenAccessor = (node: FoodNode) => node.children ?? [];\n\n  dataSource = EXAMPLE_DATA;\n\n  hasChild = (_: number, node: FoodNode) => !!node.children && node.children.length > 0;\n}\n\nconst EXAMPLE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}],\n  },\n  {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\n      },\n      {\n        name: 'Orange',\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\n      },\n    ],\n  },\n];\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {ArrayDataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {NOOP_TREE_KEY_MANAGER_FACTORY_PROVIDER} from '@angular/cdk/a11y';\nimport {MatTreeModule} from '@angular/material/tree';\n\n/** Flat node with expandable and level information */\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\n/**\n * @title Tree with flat nodes\n */\n@Component({\n  selector: 'tree-legacy-keyboard-interface-example',\n  templateUrl: 'tree-legacy-keyboard-interface-example.html',\n  styleUrls: ['tree-legacy-keyboard-interface-example.css'],\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n  providers: [NOOP_TREE_KEY_MANAGER_FACTORY_PROVIDER],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeLegacyKeyboardInterfaceExample {\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    node => node.level,\n    node => node.expandable,\n  );\n\n  dataSource = new ArrayDataSource(EXAMPLE_DATA);\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n\n  getParentNode(node: ExampleFlatNode) {\n    const nodeIndex = EXAMPLE_DATA.indexOf(node);\n\n    for (let i = nodeIndex - 1; i >= 0; i--) {\n      if (EXAMPLE_DATA[i].level === node.level - 1) {\n        return EXAMPLE_DATA[i];\n      }\n    }\n\n    return null;\n  }\n}\n\nconst EXAMPLE_DATA: ExampleFlatNode[] = [\n  {\n    name: 'Fruit',\n    expandable: true,\n    level: 0,\n  },\n  {\n    name: 'Apple',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Banana',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Fruit loops',\n    expandable: false,\n    level: 1,\n  },\n  {\n    name: 'Vegetables',\n    expandable: true,\n    level: 0,\n  },\n  {\n    name: 'Green',\n    expandable: true,\n    level: 1,\n  },\n  {\n    name: 'Broccoli',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Brussels sprouts',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Orange',\n    expandable: true,\n    level: 1,\n  },\n  {\n    name: 'Pumpkins',\n    expandable: false,\n    level: 2,\n  },\n  {\n    name: 'Carrots',\n    expandable: false,\n    level: 2,\n  },\n];\n"],"names":["item","level","expandable","isLoading","signal","DynamicDatabase","dataMap","Map","initialData","rootLevelNodes","map","name","DynamicFlatNode","getChildren","node","get","isExpandable","has","deps","target","i0","ɵɵFactoryTarget","Injectable","providedIn","decorators","DynamicDataSource","_treeControl","_database","data","value","dataNodes","dataChange","next","constructor","connect","collectionViewer","expansionModel","changed","subscribe","change","added","removed","handleTreeControl","merge","viewChange","pipe","disconnect","forEach","toggleNode","slice","reverse","expand","children","index","indexOf","set","setTimeout","nodes","splice","count","i","length","Component","isStandalone","selector","ngImport","template","imports","treeControl","FlatTreeControl","treeFlattener","MatTreeFlattener","_transformer","dataSource","MatTreeFlatDataSource","MatTreeModule","kind","type","i1","MatTreeNodeDef","inputs","MatTreeNodePadding","MatTreeNodeToggle","MatTree","exportAs","MatTreeNode","outputs","MatButtonModule","i2","MatIconButton","MatIconModule","i3","MatIcon","changeDetection","ChangeDetectionStrategy","OnPush","TreeFlatChildAccessorOverviewExample","EXAMPLE_DATA","childrenAccessor","hasChild","_","TreeHarnessExample","loadMoreId","NestedNode","childrenChange","BehaviorSubject","hasChildren","parent","isLoadMore","FlatNode","childMap","rootNodes","_generateNode","loadChildren","onlyFirstTime","batchSize","newChildrenNumber","push","ɵɵngDeclareInjectable","minVersion","version","LoadmoreDatabase","transformer","getLevel","initialize","existingNode","nodeMap","newNode","NestedTreeControl","MatTreeNestedDataSource","styles","getParentNode","nodeIndex","NOOP_TREE_KEY_MANAGER_FACTORY_PROVIDER","providers"],"mappings":"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"}